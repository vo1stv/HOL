(* mips - generated by L3 - Thu Mar 30 14:42:27 2017 *)

structure mips :> mips =
struct

structure Map = MutableMap

(* -------------------------------------------------------------------------
   Type declarations
   ------------------------------------------------------------------------- *)

type Index = { Index: BitsN.nbit, P: bool, index'rst: BitsN.nbit }

type Random = { Random: BitsN.nbit, random'rst: BitsN.nbit }

type Wired = { Wired: BitsN.nbit, wired'rst: BitsN.nbit }

type EntryLo =
  { C: BitsN.nbit, D: bool, G: bool, PFN: BitsN.nbit, V: bool,
    entrylo'rst: BitsN.nbit }

type PageMask = { Mask: BitsN.nbit, pagemask'rst: BitsN.nbit }

type EntryHi =
  { ASID: BitsN.nbit, R: BitsN.nbit, VPN2: BitsN.nbit,
    entryhi'rst: BitsN.nbit }

type StatusRegister =
  { BEV: bool, CU0: bool, ERL: bool, EXL: bool, FR: bool, IE: bool,
    IM: BitsN.nbit, KSU: BitsN.nbit, KX: bool, RE: bool, SX: bool,
    UX: bool, statusregister'rst: BitsN.nbit }

type ConfigRegister =
  { AR: BitsN.nbit, AT: BitsN.nbit, BE: bool, K0: BitsN.nbit, M: bool,
    MT: BitsN.nbit, configregister'rst: BitsN.nbit }

type ConfigRegister1 =
  { C2: bool, CA: bool, DA: BitsN.nbit, DL: BitsN.nbit, DS: BitsN.nbit,
    EP: bool, FP: bool, IA: BitsN.nbit, IL: BitsN.nbit, IS: BitsN.nbit,
    M: bool, MD: bool, MMUSize: BitsN.nbit, PC: bool, WR: bool }

type ConfigRegister2 =
  { M: bool, SA: BitsN.nbit, SL: BitsN.nbit, SS: BitsN.nbit,
    SU: BitsN.nbit, TA: BitsN.nbit, TL: BitsN.nbit, TS: BitsN.nbit,
    TU: BitsN.nbit }

type ConfigRegister3 =
  { DSPP: bool, LPA: bool, M: bool, MT: bool, SM: bool, SP: bool,
    TL: bool, ULRI: bool, VEIC: bool, VInt: bool,
    configregister3'rst: BitsN.nbit }

type ConfigRegister6 =
  { LTLB: bool, TLBSize: BitsN.nbit, configregister6'rst: BitsN.nbit }

type CauseRegister =
  { BD: bool, ExcCode: BitsN.nbit, IP: BitsN.nbit, TI: bool,
    causeregister'rst: BitsN.nbit }

type Context =
  { BadVPN2: BitsN.nbit, PTEBase: BitsN.nbit, context'rst: BitsN.nbit }

type XContext =
  { BadVPN2: BitsN.nbit, PTEBase: BitsN.nbit, R: BitsN.nbit,
    xcontext'rst: BitsN.nbit }

type HWREna =
  { CC: bool, CCRes: bool, CPUNum: bool, UL: bool, hwrena'rst: BitsN.nbit
    }

type CP0 =
  { BadVAddr: BitsN.nbit, Cause: CauseRegister, Compare: BitsN.nbit,
    Config: ConfigRegister, Config1: ConfigRegister1,
    Config2: ConfigRegister2, Config3: ConfigRegister3,
    Config6: ConfigRegister6, Context: Context, Count: BitsN.nbit,
    Debug: BitsN.nbit, EPC: BitsN.nbit, EntryHi: EntryHi,
    EntryLo0: EntryLo, EntryLo1: EntryLo, ErrCtl: BitsN.nbit,
    ErrorEPC: BitsN.nbit, HWREna: HWREna, Index: Index,
    LLAddr: BitsN.nbit, PRId: BitsN.nbit, PageMask: PageMask,
    Random: Random, Status: StatusRegister, UsrLocal: BitsN.nbit,
    Wired: Wired, XContext: XContext }

datatype ExceptionType
  = Int | Mod | TLBL | TLBS | AdEL | AdES | Sys | Bp | ResI | CpU | Ov
  | Tr | XTLBRefillL | XTLBRefillS

datatype IorD = INSTRUCTION | DATA

datatype LorS = LOAD | STORE

datatype Branch
  = BEQ of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | BEQL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | BGEZ of BitsN.nbit * BitsN.nbit
  | BGEZAL of BitsN.nbit * BitsN.nbit
  | BGEZALL of BitsN.nbit * BitsN.nbit
  | BGEZL of BitsN.nbit * BitsN.nbit
  | BGTZ of BitsN.nbit * BitsN.nbit
  | BGTZL of BitsN.nbit * BitsN.nbit
  | BLEZ of BitsN.nbit * BitsN.nbit
  | BLEZL of BitsN.nbit * BitsN.nbit
  | BLTZ of BitsN.nbit * BitsN.nbit
  | BLTZAL of BitsN.nbit * BitsN.nbit
  | BLTZALL of BitsN.nbit * BitsN.nbit
  | BLTZL of BitsN.nbit * BitsN.nbit
  | BNE of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | BNEL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | J of BitsN.nbit
  | JAL of BitsN.nbit
  | JALR of BitsN.nbit * BitsN.nbit
  | JR of BitsN.nbit

datatype CP
  = DMFC0 of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DMTC0 of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | MFC0 of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | MTC0 of BitsN.nbit * (BitsN.nbit * BitsN.nbit)

datatype Store
  = SB of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SC of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SCD of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SD of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SDL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SDR of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SH of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SW of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SWL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SWR of BitsN.nbit * (BitsN.nbit * BitsN.nbit)

datatype Load
  = LB of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LBU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LD of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LDL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LDR of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LH of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LHU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LLD of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LW of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LWL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LWR of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LWU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)

datatype Trap
  = TEQ of BitsN.nbit * BitsN.nbit
  | TEQI of BitsN.nbit * BitsN.nbit
  | TGE of BitsN.nbit * BitsN.nbit
  | TGEI of BitsN.nbit * BitsN.nbit
  | TGEIU of BitsN.nbit * BitsN.nbit
  | TGEU of BitsN.nbit * BitsN.nbit
  | TLT of BitsN.nbit * BitsN.nbit
  | TLTI of BitsN.nbit * BitsN.nbit
  | TLTIU of BitsN.nbit * BitsN.nbit
  | TLTU of BitsN.nbit * BitsN.nbit
  | TNE of BitsN.nbit * BitsN.nbit
  | TNEI of BitsN.nbit * BitsN.nbit

datatype Shift
  = DSLL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DSLL32 of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DSLLV of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DSRA of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DSRA32 of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DSRAV of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DSRL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DSRL32 of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DSRLV of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SLL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SLLV of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SRA of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SRAV of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SRL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SRLV of BitsN.nbit * (BitsN.nbit * BitsN.nbit)

datatype MultDiv
  = DDIV of BitsN.nbit * BitsN.nbit
  | DDIVU of BitsN.nbit * BitsN.nbit
  | DIV of BitsN.nbit * BitsN.nbit
  | DIVU of BitsN.nbit * BitsN.nbit
  | DMULT of BitsN.nbit * BitsN.nbit
  | DMULTU of BitsN.nbit * BitsN.nbit
  | MADD of BitsN.nbit * BitsN.nbit
  | MADDU of BitsN.nbit * BitsN.nbit
  | MFHI of BitsN.nbit
  | MFLO of BitsN.nbit
  | MSUB of BitsN.nbit * BitsN.nbit
  | MSUBU of BitsN.nbit * BitsN.nbit
  | MTHI of BitsN.nbit
  | MTLO of BitsN.nbit
  | MUL of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | MULT of BitsN.nbit * BitsN.nbit
  | MULTU of BitsN.nbit * BitsN.nbit

datatype ArithR
  = ADD of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | ADDU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | AND of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DADD of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DADDU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DSUB of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DSUBU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | MOVN of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | MOVZ of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | NOR of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | OR of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SLT of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SLTU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SUB of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SUBU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | XOR of BitsN.nbit * (BitsN.nbit * BitsN.nbit)

datatype ArithI
  = ADDI of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | ADDIU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | ANDI of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DADDI of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | DADDIU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | LUI of BitsN.nbit * BitsN.nbit
  | ORI of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SLTI of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | SLTIU of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | XORI of BitsN.nbit * (BitsN.nbit * BitsN.nbit)

datatype instruction
  = ArithI of ArithI
  | ArithR of ArithR
  | BREAK
  | Branch of Branch
  | CACHE of BitsN.nbit * (BitsN.nbit * BitsN.nbit)
  | CP of CP
  | ERET
  | Load of Load
  | MultDiv of MultDiv
  | RDHWR of BitsN.nbit * BitsN.nbit
  | ReservedInstruction
  | SYNC of BitsN.nbit
  | SYSCALL
  | Shift of Shift
  | Store of Store
  | TLBP
  | TLBR
  | TLBWI
  | TLBWR
  | Trap of Trap
  | Unpredictable
  | WAIT

datatype maybe_instruction
  = FAIL of string | OK of instruction | WORD32 of BitsN.nbit

(* -------------------------------------------------------------------------
   Casting maps (for enumerated types)
   ------------------------------------------------------------------------- *)

structure Cast =
struct
fun natToExceptionType x =
  case Nat.toInt x of
     0 => Int
   | 1 => Mod
   | 2 => TLBL
   | 3 => TLBS
   | 4 => AdEL
   | 5 => AdES
   | 6 => Sys
   | 7 => Bp
   | 8 => ResI
   | 9 => CpU
   | 10 => Ov
   | 11 => Tr
   | 12 => XTLBRefillL
   | 13 => XTLBRefillS
   | _ => raise Fail "natToExceptionType"

fun natToIorD x =
  case Nat.toInt x of
     0 => INSTRUCTION | 1 => DATA | _ => raise Fail "natToIorD"

fun natToLorS x =
  case Nat.toInt x of
     0 => LOAD | 1 => STORE | _ => raise Fail "natToLorS"

fun ExceptionTypeToNat x =
  case x of
     Int => 0
   | Mod => 1
   | TLBL => 2
   | TLBS => 3
   | AdEL => 4
   | AdES => 5
   | Sys => 6
   | Bp => 7
   | ResI => 8
   | CpU => 9
   | Ov => 10
   | Tr => 11
   | XTLBRefillL => 12
   | XTLBRefillS => 13

fun IorDToNat x =
  case x of
     INSTRUCTION => 0 | DATA => 1

fun LorSToNat x =
  case x of
     LOAD => 0 | STORE => 1

fun ExceptionTypeToString x =
  case x of
     Int => "Int"
   | Mod => "Mod"
   | TLBL => "TLBL"
   | TLBS => "TLBS"
   | AdEL => "AdEL"
   | AdES => "AdES"
   | Sys => "Sys"
   | Bp => "Bp"
   | ResI => "ResI"
   | CpU => "CpU"
   | Ov => "Ov"
   | Tr => "Tr"
   | XTLBRefillL => "XTLBRefillL"
   | XTLBRefillS => "XTLBRefillS"

fun IorDToString x =
  case x of
     INSTRUCTION => "INSTRUCTION" | DATA => "DATA"

fun LorSToString x =
  case x of
     LOAD => "LOAD" | STORE => "STORE"

fun stringToExceptionType x =
  case x of
     "Int" => Int
   | "Mod" => Mod
   | "TLBL" => TLBL
   | "TLBS" => TLBS
   | "AdEL" => AdEL
   | "AdES" => AdES
   | "Sys" => Sys
   | "Bp" => Bp
   | "ResI" => ResI
   | "CpU" => CpU
   | "Ov" => Ov
   | "Tr" => Tr
   | "XTLBRefillL" => XTLBRefillL
   | "XTLBRefillS" => XTLBRefillS
   | _ => raise Fail "stringToExceptionType"

fun stringToIorD x =
  case x of
     "INSTRUCTION" => INSTRUCTION
   | "DATA" => DATA
   | _ => raise Fail "stringToIorD"

fun stringToLorS x =
  case x of
     "LOAD" => LOAD | "STORE" => STORE | _ => raise Fail "stringToLorS"
end

(* -------------------------------------------------------------------------
   Record update functions
   ------------------------------------------------------------------------- *)

fun Index_Index_rupd ({Index, P, index'rst}: Index, x') =
  {Index = x', P = P, index'rst = index'rst}: Index

fun Index_P_rupd ({Index, P, index'rst}: Index, x') =
  {Index = Index, P = x', index'rst = index'rst}: Index

fun Index_index'rst_rupd ({Index, P, index'rst}: Index, x') =
  {Index = Index, P = P, index'rst = x'}: Index

fun Random_Random_rupd ({Random, random'rst}: Random, x') =
  {Random = x', random'rst = random'rst}: Random

fun Random_random'rst_rupd ({Random, random'rst}: Random, x') =
  {Random = Random, random'rst = x'}: Random

fun Wired_Wired_rupd ({Wired, wired'rst}: Wired, x') =
  {Wired = x', wired'rst = wired'rst}: Wired

fun Wired_wired'rst_rupd ({Wired, wired'rst}: Wired, x') =
  {Wired = Wired, wired'rst = x'}: Wired

fun EntryLo_C_rupd ({C, D, G, PFN, V, entrylo'rst}: EntryLo, x') =
  {C = x', D = D, G = G, PFN = PFN, V = V, entrylo'rst = entrylo'rst}
  : EntryLo

fun EntryLo_D_rupd ({C, D, G, PFN, V, entrylo'rst}: EntryLo, x') =
  {C = C, D = x', G = G, PFN = PFN, V = V, entrylo'rst = entrylo'rst}
  : EntryLo

fun EntryLo_G_rupd ({C, D, G, PFN, V, entrylo'rst}: EntryLo, x') =
  {C = C, D = D, G = x', PFN = PFN, V = V, entrylo'rst = entrylo'rst}
  : EntryLo

fun EntryLo_PFN_rupd ({C, D, G, PFN, V, entrylo'rst}: EntryLo, x') =
  {C = C, D = D, G = G, PFN = x', V = V, entrylo'rst = entrylo'rst}
  : EntryLo

fun EntryLo_V_rupd ({C, D, G, PFN, V, entrylo'rst}: EntryLo, x') =
  {C = C, D = D, G = G, PFN = PFN, V = x', entrylo'rst = entrylo'rst}
  : EntryLo

fun EntryLo_entrylo'rst_rupd ({C, D, G, PFN, V, entrylo'rst}
  : EntryLo, x') =
  {C = C, D = D, G = G, PFN = PFN, V = V, entrylo'rst = x'}: EntryLo

fun PageMask_Mask_rupd ({Mask, pagemask'rst}: PageMask, x') =
  {Mask = x', pagemask'rst = pagemask'rst}: PageMask

fun PageMask_pagemask'rst_rupd ({Mask, pagemask'rst}: PageMask, x') =
  {Mask = Mask, pagemask'rst = x'}: PageMask

fun EntryHi_ASID_rupd ({ASID, R, VPN2, entryhi'rst}: EntryHi, x') =
  {ASID = x', R = R, VPN2 = VPN2, entryhi'rst = entryhi'rst}: EntryHi

fun EntryHi_R_rupd ({ASID, R, VPN2, entryhi'rst}: EntryHi, x') =
  {ASID = ASID, R = x', VPN2 = VPN2, entryhi'rst = entryhi'rst}: EntryHi

fun EntryHi_VPN2_rupd ({ASID, R, VPN2, entryhi'rst}: EntryHi, x') =
  {ASID = ASID, R = R, VPN2 = x', entryhi'rst = entryhi'rst}: EntryHi

fun EntryHi_entryhi'rst_rupd ({ASID, R, VPN2, entryhi'rst}: EntryHi, x') =
  {ASID = ASID, R = R, VPN2 = VPN2, entryhi'rst = x'}: EntryHi

fun StatusRegister_BEV_rupd ({BEV, CU0, ERL, EXL, FR, IE, IM, KSU, KX, RE,
   SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = x', CU0 = CU0, ERL = ERL, EXL = EXL, FR = FR, IE = IE, IM = IM,
   KSU = KSU, KX = KX, RE = RE, SX = SX, UX = UX,
   statusregister'rst = statusregister'rst}: StatusRegister

fun StatusRegister_CU0_rupd ({BEV, CU0, ERL, EXL, FR, IE, IM, KSU, KX, RE,
   SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = x', ERL = ERL, EXL = EXL, FR = FR, IE = IE, IM = IM,
   KSU = KSU, KX = KX, RE = RE, SX = SX, UX = UX,
   statusregister'rst = statusregister'rst}: StatusRegister

fun StatusRegister_ERL_rupd ({BEV, CU0, ERL, EXL, FR, IE, IM, KSU, KX, RE,
   SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, ERL = x', EXL = EXL, FR = FR, IE = IE, IM = IM,
   KSU = KSU, KX = KX, RE = RE, SX = SX, UX = UX,
   statusregister'rst = statusregister'rst}: StatusRegister

fun StatusRegister_EXL_rupd ({BEV, CU0, ERL, EXL, FR, IE, IM, KSU, KX, RE,
   SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, ERL = ERL, EXL = x', FR = FR, IE = IE, IM = IM,
   KSU = KSU, KX = KX, RE = RE, SX = SX, UX = UX,
   statusregister'rst = statusregister'rst}: StatusRegister

fun StatusRegister_FR_rupd ({BEV, CU0, ERL, EXL, FR, IE, IM, KSU, KX, RE,
   SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, ERL = ERL, EXL = EXL, FR = x', IE = IE, IM = IM,
   KSU = KSU, KX = KX, RE = RE, SX = SX, UX = UX,
   statusregister'rst = statusregister'rst}: StatusRegister

fun StatusRegister_IE_rupd ({BEV, CU0, ERL, EXL, FR, IE, IM, KSU, KX, RE,
   SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, ERL = ERL, EXL = EXL, FR = FR, IE = x', IM = IM,
   KSU = KSU, KX = KX, RE = RE, SX = SX, UX = UX,
   statusregister'rst = statusregister'rst}: StatusRegister

fun StatusRegister_IM_rupd ({BEV, CU0, ERL, EXL, FR, IE, IM, KSU, KX, RE,
   SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, ERL = ERL, EXL = EXL, FR = FR, IE = IE, IM = x',
   KSU = KSU, KX = KX, RE = RE, SX = SX, UX = UX,
   statusregister'rst = statusregister'rst}: StatusRegister

fun StatusRegister_KSU_rupd ({BEV, CU0, ERL, EXL, FR, IE, IM, KSU, KX, RE,
   SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, ERL = ERL, EXL = EXL, FR = FR, IE = IE, IM = IM,
   KSU = x', KX = KX, RE = RE, SX = SX, UX = UX,
   statusregister'rst = statusregister'rst}: StatusRegister

fun StatusRegister_KX_rupd ({BEV, CU0, ERL, EXL, FR, IE, IM, KSU, KX, RE,
   SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, ERL = ERL, EXL = EXL, FR = FR, IE = IE, IM = IM,
   KSU = KSU, KX = x', RE = RE, SX = SX, UX = UX,
   statusregister'rst = statusregister'rst}: StatusRegister

fun StatusRegister_RE_rupd ({BEV, CU0, ERL, EXL, FR, IE, IM, KSU, KX, RE,
   SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, ERL = ERL, EXL = EXL, FR = FR, IE = IE, IM = IM,
   KSU = KSU, KX = KX, RE = x', SX = SX, UX = UX,
   statusregister'rst = statusregister'rst}: StatusRegister

fun StatusRegister_SX_rupd ({BEV, CU0, ERL, EXL, FR, IE, IM, KSU, KX, RE,
   SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, ERL = ERL, EXL = EXL, FR = FR, IE = IE, IM = IM,
   KSU = KSU, KX = KX, RE = RE, SX = x', UX = UX,
   statusregister'rst = statusregister'rst}: StatusRegister

fun StatusRegister_UX_rupd ({BEV, CU0, ERL, EXL, FR, IE, IM, KSU, KX, RE,
   SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, ERL = ERL, EXL = EXL, FR = FR, IE = IE, IM = IM,
   KSU = KSU, KX = KX, RE = RE, SX = SX, UX = x',
   statusregister'rst = statusregister'rst}: StatusRegister

fun StatusRegister_statusregister'rst_rupd ({BEV, CU0, ERL, EXL, FR, IE,
   IM, KSU, KX, RE, SX, UX, statusregister'rst}: StatusRegister, x') =
  {BEV = BEV, CU0 = CU0, ERL = ERL, EXL = EXL, FR = FR, IE = IE, IM = IM,
   KSU = KSU, KX = KX, RE = RE, SX = SX, UX = UX, statusregister'rst = x'}
  : StatusRegister

fun ConfigRegister_AR_rupd ({AR, AT, BE, K0, M, MT, configregister'rst}
  : ConfigRegister, x') =
  {AR = x', AT = AT, BE = BE, K0 = K0, M = M, MT = MT,
   configregister'rst = configregister'rst}: ConfigRegister

fun ConfigRegister_AT_rupd ({AR, AT, BE, K0, M, MT, configregister'rst}
  : ConfigRegister, x') =
  {AR = AR, AT = x', BE = BE, K0 = K0, M = M, MT = MT,
   configregister'rst = configregister'rst}: ConfigRegister

fun ConfigRegister_BE_rupd ({AR, AT, BE, K0, M, MT, configregister'rst}
  : ConfigRegister, x') =
  {AR = AR, AT = AT, BE = x', K0 = K0, M = M, MT = MT,
   configregister'rst = configregister'rst}: ConfigRegister

fun ConfigRegister_K0_rupd ({AR, AT, BE, K0, M, MT, configregister'rst}
  : ConfigRegister, x') =
  {AR = AR, AT = AT, BE = BE, K0 = x', M = M, MT = MT,
   configregister'rst = configregister'rst}: ConfigRegister

fun ConfigRegister_M_rupd ({AR, AT, BE, K0, M, MT, configregister'rst}
  : ConfigRegister, x') =
  {AR = AR, AT = AT, BE = BE, K0 = K0, M = x', MT = MT,
   configregister'rst = configregister'rst}: ConfigRegister

fun ConfigRegister_MT_rupd ({AR, AT, BE, K0, M, MT, configregister'rst}
  : ConfigRegister, x') =
  {AR = AR, AT = AT, BE = BE, K0 = K0, M = M, MT = x',
   configregister'rst = configregister'rst}: ConfigRegister

fun ConfigRegister_configregister'rst_rupd ({AR, AT, BE, K0, M, MT,
   configregister'rst}: ConfigRegister, x') =
  {AR = AR, AT = AT, BE = BE, K0 = K0, M = M, MT = MT,
   configregister'rst = x'}: ConfigRegister

fun ConfigRegister1_C2_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PC, WR}: ConfigRegister1, x') =
  {C2 = x', CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = FP, IA = IA,
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize, PC = PC, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_CA_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PC, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = x', DA = DA, DL = DL, DS = DS, EP = EP, FP = FP, IA = IA,
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize, PC = PC, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_DA_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PC, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = x', DL = DL, DS = DS, EP = EP, FP = FP, IA = IA,
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize, PC = PC, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_DL_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PC, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = x', DS = DS, EP = EP, FP = FP, IA = IA,
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize, PC = PC, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_DS_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PC, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = x', EP = EP, FP = FP, IA = IA,
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize, PC = PC, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_EP_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PC, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = x', FP = FP, IA = IA,
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize, PC = PC, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_FP_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PC, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = x', IA = IA,
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize, PC = PC, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_IA_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PC, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = FP, IA = x',
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize, PC = PC, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_IL_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PC, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = FP, IA = IA,
   IL = x', IS = IS, M = M, MD = MD, MMUSize = MMUSize, PC = PC, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_IS_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PC, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = FP, IA = IA,
   IL = IL, IS = x', M = M, MD = MD, MMUSize = MMUSize, PC = PC, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_M_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PC, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = FP, IA = IA,
   IL = IL, IS = IS, M = x', MD = MD, MMUSize = MMUSize, PC = PC, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_MD_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PC, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = FP, IA = IA,
   IL = IL, IS = IS, M = M, MD = x', MMUSize = MMUSize, PC = PC, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_MMUSize_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS,
   M, MD, MMUSize, PC, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = FP, IA = IA,
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = x', PC = PC, WR = WR}
  : ConfigRegister1

fun ConfigRegister1_PC_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PC, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = FP, IA = IA,
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize, PC = x', WR = WR}
  : ConfigRegister1

fun ConfigRegister1_WR_rupd ({C2, CA, DA, DL, DS, EP, FP, IA, IL, IS, M,
   MD, MMUSize, PC, WR}: ConfigRegister1, x') =
  {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = FP, IA = IA,
   IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize, PC = PC, WR = x'}
  : ConfigRegister1

fun ConfigRegister2_M_rupd ({M, SA, SL, SS, SU, TA, TL, TS, TU}
  : ConfigRegister2, x') =
  {M = x', SA = SA, SL = SL, SS = SS, SU = SU, TA = TA, TL = TL, TS = TS,
   TU = TU}: ConfigRegister2

fun ConfigRegister2_SA_rupd ({M, SA, SL, SS, SU, TA, TL, TS, TU}
  : ConfigRegister2, x') =
  {M = M, SA = x', SL = SL, SS = SS, SU = SU, TA = TA, TL = TL, TS = TS,
   TU = TU}: ConfigRegister2

fun ConfigRegister2_SL_rupd ({M, SA, SL, SS, SU, TA, TL, TS, TU}
  : ConfigRegister2, x') =
  {M = M, SA = SA, SL = x', SS = SS, SU = SU, TA = TA, TL = TL, TS = TS,
   TU = TU}: ConfigRegister2

fun ConfigRegister2_SS_rupd ({M, SA, SL, SS, SU, TA, TL, TS, TU}
  : ConfigRegister2, x') =
  {M = M, SA = SA, SL = SL, SS = x', SU = SU, TA = TA, TL = TL, TS = TS,
   TU = TU}: ConfigRegister2

fun ConfigRegister2_SU_rupd ({M, SA, SL, SS, SU, TA, TL, TS, TU}
  : ConfigRegister2, x') =
  {M = M, SA = SA, SL = SL, SS = SS, SU = x', TA = TA, TL = TL, TS = TS,
   TU = TU}: ConfigRegister2

fun ConfigRegister2_TA_rupd ({M, SA, SL, SS, SU, TA, TL, TS, TU}
  : ConfigRegister2, x') =
  {M = M, SA = SA, SL = SL, SS = SS, SU = SU, TA = x', TL = TL, TS = TS,
   TU = TU}: ConfigRegister2

fun ConfigRegister2_TL_rupd ({M, SA, SL, SS, SU, TA, TL, TS, TU}
  : ConfigRegister2, x') =
  {M = M, SA = SA, SL = SL, SS = SS, SU = SU, TA = TA, TL = x', TS = TS,
   TU = TU}: ConfigRegister2

fun ConfigRegister2_TS_rupd ({M, SA, SL, SS, SU, TA, TL, TS, TU}
  : ConfigRegister2, x') =
  {M = M, SA = SA, SL = SL, SS = SS, SU = SU, TA = TA, TL = TL, TS = x',
   TU = TU}: ConfigRegister2

fun ConfigRegister2_TU_rupd ({M, SA, SL, SS, SU, TA, TL, TS, TU}
  : ConfigRegister2, x') =
  {M = M, SA = SA, SL = SL, SS = SS, SU = SU, TA = TA, TL = TL, TS = TS,
   TU = x'}: ConfigRegister2

fun ConfigRegister3_DSPP_rupd ({DSPP, LPA, M, MT, SM, SP, TL, ULRI, VEIC,
   VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = x', LPA = LPA, M = M, MT = MT, SM = SM, SP = SP, TL = TL,
   ULRI = ULRI, VEIC = VEIC, VInt = VInt,
   configregister3'rst = configregister3'rst}: ConfigRegister3

fun ConfigRegister3_LPA_rupd ({DSPP, LPA, M, MT, SM, SP, TL, ULRI, VEIC,
   VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = DSPP, LPA = x', M = M, MT = MT, SM = SM, SP = SP, TL = TL,
   ULRI = ULRI, VEIC = VEIC, VInt = VInt,
   configregister3'rst = configregister3'rst}: ConfigRegister3

fun ConfigRegister3_M_rupd ({DSPP, LPA, M, MT, SM, SP, TL, ULRI, VEIC,
   VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = DSPP, LPA = LPA, M = x', MT = MT, SM = SM, SP = SP, TL = TL,
   ULRI = ULRI, VEIC = VEIC, VInt = VInt,
   configregister3'rst = configregister3'rst}: ConfigRegister3

fun ConfigRegister3_MT_rupd ({DSPP, LPA, M, MT, SM, SP, TL, ULRI, VEIC,
   VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = DSPP, LPA = LPA, M = M, MT = x', SM = SM, SP = SP, TL = TL,
   ULRI = ULRI, VEIC = VEIC, VInt = VInt,
   configregister3'rst = configregister3'rst}: ConfigRegister3

fun ConfigRegister3_SM_rupd ({DSPP, LPA, M, MT, SM, SP, TL, ULRI, VEIC,
   VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = DSPP, LPA = LPA, M = M, MT = MT, SM = x', SP = SP, TL = TL,
   ULRI = ULRI, VEIC = VEIC, VInt = VInt,
   configregister3'rst = configregister3'rst}: ConfigRegister3

fun ConfigRegister3_SP_rupd ({DSPP, LPA, M, MT, SM, SP, TL, ULRI, VEIC,
   VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = DSPP, LPA = LPA, M = M, MT = MT, SM = SM, SP = x', TL = TL,
   ULRI = ULRI, VEIC = VEIC, VInt = VInt,
   configregister3'rst = configregister3'rst}: ConfigRegister3

fun ConfigRegister3_TL_rupd ({DSPP, LPA, M, MT, SM, SP, TL, ULRI, VEIC,
   VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = DSPP, LPA = LPA, M = M, MT = MT, SM = SM, SP = SP, TL = x',
   ULRI = ULRI, VEIC = VEIC, VInt = VInt,
   configregister3'rst = configregister3'rst}: ConfigRegister3

fun ConfigRegister3_ULRI_rupd ({DSPP, LPA, M, MT, SM, SP, TL, ULRI, VEIC,
   VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = DSPP, LPA = LPA, M = M, MT = MT, SM = SM, SP = SP, TL = TL,
   ULRI = x', VEIC = VEIC, VInt = VInt,
   configregister3'rst = configregister3'rst}: ConfigRegister3

fun ConfigRegister3_VEIC_rupd ({DSPP, LPA, M, MT, SM, SP, TL, ULRI, VEIC,
   VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = DSPP, LPA = LPA, M = M, MT = MT, SM = SM, SP = SP, TL = TL,
   ULRI = ULRI, VEIC = x', VInt = VInt,
   configregister3'rst = configregister3'rst}: ConfigRegister3

fun ConfigRegister3_VInt_rupd ({DSPP, LPA, M, MT, SM, SP, TL, ULRI, VEIC,
   VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = DSPP, LPA = LPA, M = M, MT = MT, SM = SM, SP = SP, TL = TL,
   ULRI = ULRI, VEIC = VEIC, VInt = x',
   configregister3'rst = configregister3'rst}: ConfigRegister3

fun ConfigRegister3_configregister3'rst_rupd ({DSPP, LPA, M, MT, SM, SP,
   TL, ULRI, VEIC, VInt, configregister3'rst}: ConfigRegister3, x') =
  {DSPP = DSPP, LPA = LPA, M = M, MT = MT, SM = SM, SP = SP, TL = TL,
   ULRI = ULRI, VEIC = VEIC, VInt = VInt, configregister3'rst = x'}
  : ConfigRegister3

fun ConfigRegister6_LTLB_rupd ({LTLB, TLBSize, configregister6'rst}
  : ConfigRegister6, x') =
  {LTLB = x', TLBSize = TLBSize, configregister6'rst = configregister6'rst}
  : ConfigRegister6

fun ConfigRegister6_TLBSize_rupd ({LTLB, TLBSize, configregister6'rst}
  : ConfigRegister6, x') =
  {LTLB = LTLB, TLBSize = x', configregister6'rst = configregister6'rst}
  : ConfigRegister6

fun ConfigRegister6_configregister6'rst_rupd ({LTLB, TLBSize,
   configregister6'rst}: ConfigRegister6, x') =
  {LTLB = LTLB, TLBSize = TLBSize, configregister6'rst = x'}
  : ConfigRegister6

fun CauseRegister_BD_rupd ({BD, ExcCode, IP, TI, causeregister'rst}
  : CauseRegister, x') =
  {BD = x', ExcCode = ExcCode, IP = IP, TI = TI,
   causeregister'rst = causeregister'rst}: CauseRegister

fun CauseRegister_ExcCode_rupd ({BD, ExcCode, IP, TI, causeregister'rst}
  : CauseRegister, x') =
  {BD = BD, ExcCode = x', IP = IP, TI = TI,
   causeregister'rst = causeregister'rst}: CauseRegister

fun CauseRegister_IP_rupd ({BD, ExcCode, IP, TI, causeregister'rst}
  : CauseRegister, x') =
  {BD = BD, ExcCode = ExcCode, IP = x', TI = TI,
   causeregister'rst = causeregister'rst}: CauseRegister

fun CauseRegister_TI_rupd ({BD, ExcCode, IP, TI, causeregister'rst}
  : CauseRegister, x') =
  {BD = BD, ExcCode = ExcCode, IP = IP, TI = x',
   causeregister'rst = causeregister'rst}: CauseRegister

fun CauseRegister_causeregister'rst_rupd ({BD, ExcCode, IP, TI,
   causeregister'rst}: CauseRegister, x') =
  {BD = BD, ExcCode = ExcCode, IP = IP, TI = TI, causeregister'rst = x'}
  : CauseRegister

fun Context_BadVPN2_rupd ({BadVPN2, PTEBase, context'rst}: Context, x') =
  {BadVPN2 = x', PTEBase = PTEBase, context'rst = context'rst}: Context

fun Context_PTEBase_rupd ({BadVPN2, PTEBase, context'rst}: Context, x') =
  {BadVPN2 = BadVPN2, PTEBase = x', context'rst = context'rst}: Context

fun Context_context'rst_rupd ({BadVPN2, PTEBase, context'rst}
  : Context, x') =
  {BadVPN2 = BadVPN2, PTEBase = PTEBase, context'rst = x'}: Context

fun XContext_BadVPN2_rupd ({BadVPN2, PTEBase, R, xcontext'rst}
  : XContext, x') =
  {BadVPN2 = x', PTEBase = PTEBase, R = R, xcontext'rst = xcontext'rst}
  : XContext

fun XContext_PTEBase_rupd ({BadVPN2, PTEBase, R, xcontext'rst}
  : XContext, x') =
  {BadVPN2 = BadVPN2, PTEBase = x', R = R, xcontext'rst = xcontext'rst}
  : XContext

fun XContext_R_rupd ({BadVPN2, PTEBase, R, xcontext'rst}: XContext, x') =
  {BadVPN2 = BadVPN2, PTEBase = PTEBase, R = x',
   xcontext'rst = xcontext'rst}: XContext

fun XContext_xcontext'rst_rupd ({BadVPN2, PTEBase, R, xcontext'rst}
  : XContext, x') =
  {BadVPN2 = BadVPN2, PTEBase = PTEBase, R = R, xcontext'rst = x'}
  : XContext

fun HWREna_CC_rupd ({CC, CCRes, CPUNum, UL, hwrena'rst}: HWREna, x') =
  {CC = x', CCRes = CCRes, CPUNum = CPUNum, UL = UL,
   hwrena'rst = hwrena'rst}: HWREna

fun HWREna_CCRes_rupd ({CC, CCRes, CPUNum, UL, hwrena'rst}: HWREna, x') =
  {CC = CC, CCRes = x', CPUNum = CPUNum, UL = UL, hwrena'rst = hwrena'rst}
  : HWREna

fun HWREna_CPUNum_rupd ({CC, CCRes, CPUNum, UL, hwrena'rst}: HWREna, x') =
  {CC = CC, CCRes = CCRes, CPUNum = x', UL = UL, hwrena'rst = hwrena'rst}
  : HWREna

fun HWREna_UL_rupd ({CC, CCRes, CPUNum, UL, hwrena'rst}: HWREna, x') =
  {CC = CC, CCRes = CCRes, CPUNum = CPUNum, UL = x',
   hwrena'rst = hwrena'rst}: HWREna

fun HWREna_hwrena'rst_rupd ({CC, CCRes, CPUNum, UL, hwrena'rst}
  : HWREna, x') =
  {CC = CC, CCRes = CCRes, CPUNum = CPUNum, UL = UL, hwrena'rst = x'}
  : HWREna

fun CP0_BadVAddr_rupd ({BadVAddr, Cause, Compare, Config, Config1,
   Config2, Config3, Config6, Context, Count, Debug, EPC, EntryHi,
   EntryLo0, EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId,
   PageMask, Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = x', Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Cause_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = x', Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Compare_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = x', Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Config_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = x',
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Config1_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = x', Config2 = Config2, Config3 = Config3, Config6 = Config6,
   Context = Context, Count = Count, Debug = Debug, EPC = EPC,
   EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Config2_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = x', Config3 = Config3, Config6 = Config6,
   Context = Context, Count = Count, Debug = Debug, EPC = EPC,
   EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Config3_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = x', Config6 = Config6,
   Context = Context, Count = Count, Debug = Debug, EPC = EPC,
   EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Config6_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3, Config6 = x',
   Context = Context, Count = Count, Debug = Debug, EPC = EPC,
   EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Context_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = x', Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Count_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = x', Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Debug_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = x',
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_EPC_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = x', EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_EntryHi_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = x', EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_EntryLo0_rupd ({BadVAddr, Cause, Compare, Config, Config1,
   Config2, Config3, Config6, Context, Count, Debug, EPC, EntryHi,
   EntryLo0, EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId,
   PageMask, Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = x', EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_EntryLo1_rupd ({BadVAddr, Cause, Compare, Config, Config1,
   Config2, Config3, Config6, Context, Count, Debug, EPC, EntryHi,
   EntryLo0, EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId,
   PageMask, Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = x',
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_ErrCtl_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = x', ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_ErrorEPC_rupd ({BadVAddr, Cause, Compare, Config, Config1,
   Config2, Config3, Config6, Context, Count, Debug, EPC, EntryHi,
   EntryLo0, EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId,
   PageMask, Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = x', HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_HWREna_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = x', Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Index_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = x',
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_LLAddr_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = x', PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_PRId_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = x', PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_PageMask_rupd ({BadVAddr, Cause, Compare, Config, Config1,
   Config2, Config3, Config6, Context, Count, Debug, EPC, EntryHi,
   EntryLo0, EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId,
   PageMask, Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = x', Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Random_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = x',
   Status = Status, UsrLocal = UsrLocal, Wired = Wired,
   XContext = XContext}: CP0

fun CP0_Status_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = x', UsrLocal = UsrLocal, Wired = Wired, XContext = XContext}
  : CP0

fun CP0_UsrLocal_rupd ({BadVAddr, Cause, Compare, Config, Config1,
   Config2, Config3, Config6, Context, Count, Debug, EPC, EntryHi,
   EntryLo0, EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId,
   PageMask, Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = x', Wired = Wired, XContext = XContext}
  : CP0

fun CP0_Wired_rupd ({BadVAddr, Cause, Compare, Config, Config1, Config2,
   Config3, Config6, Context, Count, Debug, EPC, EntryHi, EntryLo0,
   EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId, PageMask,
   Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = x', XContext = XContext}
  : CP0

fun CP0_XContext_rupd ({BadVAddr, Cause, Compare, Config, Config1,
   Config2, Config3, Config6, Context, Count, Debug, EPC, EntryHi,
   EntryLo0, EntryLo1, ErrCtl, ErrorEPC, HWREna, Index, LLAddr, PRId,
   PageMask, Random, Status, UsrLocal, Wired, XContext}: CP0, x') =
  {BadVAddr = BadVAddr, Cause = Cause, Compare = Compare, Config = Config,
   Config1 = Config1, Config2 = Config2, Config3 = Config3,
   Config6 = Config6, Context = Context, Count = Count, Debug = Debug,
   EPC = EPC, EntryHi = EntryHi, EntryLo0 = EntryLo0, EntryLo1 = EntryLo1,
   ErrCtl = ErrCtl, ErrorEPC = ErrorEPC, HWREna = HWREna, Index = Index,
   LLAddr = LLAddr, PRId = PRId, PageMask = PageMask, Random = Random,
   Status = Status, UsrLocal = UsrLocal, Wired = Wired, XContext = x'}
  : CP0

(* -------------------------------------------------------------------------
   Exceptions
   ------------------------------------------------------------------------- *)

exception UNPREDICTABLE of string

(* -------------------------------------------------------------------------
   Global variables (state)
   ------------------------------------------------------------------------- *)

val BranchDelay = ref (NONE): ((BitsN.nbit option) option) ref

val BranchTo = ref (NONE): ((bool * BitsN.nbit) option) ref

val CP0 = ref
  ({BadVAddr = BitsN.B(0x0,64),
    Cause =
      {BD = false, ExcCode = BitsN.B(0x0,5), IP = BitsN.B(0x0,8),
       TI = false, causeregister'rst = BitsN.B(0x0,17)},
    Compare = BitsN.B(0x0,32),
    Config =
      {AR = BitsN.B(0x0,3), AT = BitsN.B(0x0,2), BE = false,
       K0 = BitsN.B(0x0,3), M = false, MT = BitsN.B(0x0,3),
       configregister'rst = BitsN.B(0x0,19)},
    Config1 =
      {C2 = false, CA = false, DA = BitsN.B(0x0,3), DL = BitsN.B(0x0,3),
       DS = BitsN.B(0x0,3), EP = false, FP = false, IA = BitsN.B(0x0,3),
       IL = BitsN.B(0x0,3), IS = BitsN.B(0x0,3), M = false, MD = false,
       MMUSize = BitsN.B(0x0,6), PC = false, WR = false},
    Config2 =
      {M = false, SA = BitsN.B(0x0,4), SL = BitsN.B(0x0,4),
       SS = BitsN.B(0x0,4), SU = BitsN.B(0x0,4), TA = BitsN.B(0x0,4),
       TL = BitsN.B(0x0,4), TS = BitsN.B(0x0,4), TU = BitsN.B(0x0,3)},
    Config3 =
      {DSPP = false, LPA = false, M = false, MT = false, SM = false,
       SP = false, TL = false, ULRI = false, VEIC = false, VInt = false,
       configregister3'rst = BitsN.B(0x0,22)},
    Config6 =
      {LTLB = false, TLBSize = BitsN.B(0x0,16),
       configregister6'rst = BitsN.B(0x0,15)},
    Context =
      {BadVPN2 = BitsN.B(0x0,19), PTEBase = BitsN.B(0x0,41),
       context'rst = BitsN.B(0x0,4)}, Count = BitsN.B(0x0,32),
    Debug = BitsN.B(0x0,32), EPC = BitsN.B(0x0,64),
    EntryHi =
      {ASID = BitsN.B(0x0,8), R = BitsN.B(0x0,2), VPN2 = BitsN.B(0x0,27),
       entryhi'rst = BitsN.B(0x0,27)},
    EntryLo0 =
      {C = BitsN.B(0x0,3), D = false, G = false, PFN = BitsN.B(0x0,28),
       V = false, entrylo'rst = BitsN.B(0x0,30)},
    EntryLo1 =
      {C = BitsN.B(0x0,3), D = false, G = false, PFN = BitsN.B(0x0,28),
       V = false, entrylo'rst = BitsN.B(0x0,30)},
    ErrCtl = BitsN.B(0x0,32), ErrorEPC = BitsN.B(0x0,64),
    HWREna =
      {CC = false, CCRes = false, CPUNum = false, UL = false,
       hwrena'rst = BitsN.B(0x0,28)},
    Index =
      {Index = BitsN.B(0x0,8), P = false, index'rst = BitsN.B(0x0,23)},
    LLAddr = BitsN.B(0x0,64), PRId = BitsN.B(0x0,32),
    PageMask = {Mask = BitsN.B(0x0,12), pagemask'rst = BitsN.B(0x0,20)},
    Random = {Random = BitsN.B(0x0,8), random'rst = BitsN.B(0x0,24)},
    Status =
      {BEV = false, CU0 = false, ERL = false, EXL = false, FR = false,
       IE = false, IM = BitsN.B(0x0,8), KSU = BitsN.B(0x0,2), KX = false,
       RE = false, SX = false, UX = false,
       statusregister'rst = BitsN.B(0x0,12)}, UsrLocal = BitsN.B(0x0,64),
    Wired = {Wired = BitsN.B(0x0,8), wired'rst = BitsN.B(0x0,24)},
    XContext =
      {BadVPN2 = BitsN.B(0x0,27), PTEBase = BitsN.B(0x0,31),
       R = BitsN.B(0x0,2), xcontext'rst = BitsN.B(0x0,4)}}): CP0 ref

val LLbit = ref (NONE): (bool option) ref

val MEM = ref (Map.mkMap(SOME 18446744073709551616,BitsN.B(0x0,8)))
  : (BitsN.nbit Map.map) ref

val PC = ref (BitsN.B(0x0,64)): BitsN.nbit ref

val exceptionSignalled = ref (false): bool ref

val gpr = ref (Map.mkMap(SOME 32,BitsN.B(0x0,64)))
  : (BitsN.nbit Map.map) ref

val hi = ref (NONE): (BitsN.nbit option) ref

val lo = ref (NONE): (BitsN.nbit option) ref

(* -------------------------------------------------------------------------
   Main specification
   ------------------------------------------------------------------------- *)

local
  fun tuple'32 [t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,
                t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,
                t31] =
    (t0,
     (t1,
      (t2,
       (t3,
        (t4,
         (t5,
          (t6,
           (t7,
            (t8,
             (t9,
              (t10,
               (t11,
                (t12,
                 (t13,
                  (t14,
                   (t15,
                    (t16,
                     (t17,
                      (t18,
                       (t19,
                        (t20,
                         (t21,
                          (t22,
                           (t23,
                            (t24,(t25,(t26,(t27,(t28,(t29,(t30,t31)))))))))))))))))))))))))))))))
    | tuple'32 (_: bool list) = raise Fail "tuple'32"
in
  val boolify'32 = tuple'32 o BitsN.toList
end

fun rec'Index x =
  {Index = BitsN.bits(7,0) x, P = BitsN.bit(x,31),
   index'rst = BitsN.bits(30,8) x};

fun reg'Index x =
  case x of
     {Index = Index, P = P, index'rst = index'rst} =>
       BitsN.concat[BitsN.fromBit P,index'rst,Index];

fun write'rec'Index (_,x) = reg'Index x;

fun write'reg'Index (_,x) = rec'Index x;

fun rec'Random x =
  {Random = BitsN.bits(7,0) x, random'rst = BitsN.bits(31,8) x};

fun reg'Random x =
  case x of
     {Random = Random, random'rst = random'rst} =>
       BitsN.@@(random'rst,Random);

fun write'rec'Random (_,x) = reg'Random x;

fun write'reg'Random (_,x) = rec'Random x;

fun rec'Wired x =
  {Wired = BitsN.bits(7,0) x, wired'rst = BitsN.bits(31,8) x};

fun reg'Wired x =
  case x of
     {Wired = Wired, wired'rst = wired'rst} => BitsN.@@(wired'rst,Wired);

fun write'rec'Wired (_,x) = reg'Wired x;

fun write'reg'Wired (_,x) = rec'Wired x;

fun rec'EntryLo x =
  {C = BitsN.bits(5,3) x, D = BitsN.bit(x,2), G = BitsN.bit(x,0),
   PFN = BitsN.bits(33,6) x, V = BitsN.bit(x,1),
   entrylo'rst = BitsN.bits(63,34) x};

fun reg'EntryLo x =
  case x of
     {C = C, D = D, G = G, PFN = PFN, V = V, entrylo'rst = entrylo'rst} =>
       BitsN.concat
         [entrylo'rst,PFN,C,BitsN.fromBit D,BitsN.fromBit V,
          BitsN.fromBit G];

fun write'rec'EntryLo (_,x) = reg'EntryLo x;

fun write'reg'EntryLo (_,x) = rec'EntryLo x;

fun rec'PageMask x =
  {Mask = BitsN.bits(24,13) x,
   pagemask'rst = BitsN.@@(BitsN.bits(12,0) x,BitsN.bits(31,25) x)};

fun reg'PageMask x =
  case x of
     {Mask = Mask, pagemask'rst = pagemask'rst} =>
       BitsN.concat
         [BitsN.bits(6,0) pagemask'rst,Mask,BitsN.bits(19,7) pagemask'rst];

fun write'rec'PageMask (_,x) = reg'PageMask x;

fun write'reg'PageMask (_,x) = rec'PageMask x;

fun rec'EntryHi x =
  {ASID = BitsN.bits(7,0) x, R = BitsN.bits(63,62) x,
   VPN2 = BitsN.bits(39,13) x,
   entryhi'rst = BitsN.@@(BitsN.bits(12,8) x,BitsN.bits(61,40) x)};

fun reg'EntryHi x =
  case x of
     {ASID = ASID, R = R, VPN2 = VPN2, entryhi'rst = entryhi'rst} =>
       BitsN.concat
         [R,BitsN.bits(21,0) entryhi'rst,VPN2,
          BitsN.bits(26,22) entryhi'rst,ASID];

fun write'rec'EntryHi (_,x) = reg'EntryHi x;

fun write'reg'EntryHi (_,x) = rec'EntryHi x;

fun rec'StatusRegister x =
  {BEV = BitsN.bit(x,22), CU0 = BitsN.bit(x,28), ERL = BitsN.bit(x,2),
   EXL = BitsN.bit(x,1), FR = BitsN.bit(x,26), IE = BitsN.bit(x,0),
   IM = BitsN.bits(15,8) x, KSU = BitsN.bits(4,3) x, KX = BitsN.bit(x,7),
   RE = BitsN.bit(x,25), SX = BitsN.bit(x,6), UX = BitsN.bit(x,5),
   statusregister'rst =
     BitsN.concat
       [BitsN.bits(21,16) x,BitsN.bits(24,23) x,BitsN.bits(27,27) x,
        BitsN.bits(31,29) x]};

fun reg'StatusRegister x =
  case x of
     {BEV = BEV, CU0 = CU0, ERL = ERL, EXL = EXL, FR = FR, IE = IE,
      IM = IM, KSU = KSU, KX = KX, RE = RE, SX = SX, UX = UX,
      statusregister'rst = statusregister'rst} =>
       BitsN.concat
         [BitsN.bits(2,0) statusregister'rst,BitsN.fromBit CU0,
          BitsN.bits(3,3) statusregister'rst,BitsN.fromBit FR,
          BitsN.fromBit RE,BitsN.bits(5,4) statusregister'rst,
          BitsN.fromBit BEV,BitsN.bits(11,6) statusregister'rst,IM,
          BitsN.fromBit KX,BitsN.fromBit SX,BitsN.fromBit UX,KSU,
          BitsN.fromBit ERL,BitsN.fromBit EXL,BitsN.fromBit IE];

fun write'rec'StatusRegister (_,x) = reg'StatusRegister x;

fun write'reg'StatusRegister (_,x) = rec'StatusRegister x;

fun rec'ConfigRegister x =
  {AR = BitsN.bits(12,10) x, AT = BitsN.bits(14,13) x,
   BE = BitsN.bit(x,15), K0 = BitsN.bits(2,0) x, M = BitsN.bit(x,31),
   MT = BitsN.bits(9,7) x,
   configregister'rst = BitsN.@@(BitsN.bits(6,3) x,BitsN.bits(30,16) x)};

fun reg'ConfigRegister x =
  case x of
     {AR = AR, AT = AT, BE = BE, K0 = K0, M = M, MT = MT,
      configregister'rst = configregister'rst} =>
       BitsN.concat
         [BitsN.fromBit M,BitsN.bits(14,0) configregister'rst,
          BitsN.fromBit BE,AT,AR,MT,BitsN.bits(18,15) configregister'rst,
          K0];

fun write'rec'ConfigRegister (_,x) = reg'ConfigRegister x;

fun write'reg'ConfigRegister (_,x) = rec'ConfigRegister x;

fun rec'ConfigRegister1 x =
  {C2 = BitsN.bit(x,6), CA = BitsN.bit(x,2), DA = BitsN.bits(9,7) x,
   DL = BitsN.bits(12,10) x, DS = BitsN.bits(15,13) x,
   EP = BitsN.bit(x,1), FP = BitsN.bit(x,0), IA = BitsN.bits(18,16) x,
   IL = BitsN.bits(21,19) x, IS = BitsN.bits(24,22) x,
   M = BitsN.bit(x,31), MD = BitsN.bit(x,5),
   MMUSize = BitsN.bits(30,25) x, PC = BitsN.bit(x,4), WR = BitsN.bit(x,3)};

fun reg'ConfigRegister1 x =
  case x of
     {C2 = C2, CA = CA, DA = DA, DL = DL, DS = DS, EP = EP, FP = FP,
      IA = IA, IL = IL, IS = IS, M = M, MD = MD, MMUSize = MMUSize,
      PC = PC, WR = WR} =>
       BitsN.concat
         [BitsN.fromBit M,MMUSize,IS,IL,IA,DS,DL,DA,BitsN.fromBit C2,
          BitsN.fromBit MD,BitsN.fromBit PC,BitsN.fromBit WR,
          BitsN.fromBit CA,BitsN.fromBit EP,BitsN.fromBit FP];

fun write'rec'ConfigRegister1 (_,x) = reg'ConfigRegister1 x;

fun write'reg'ConfigRegister1 (_,x) = rec'ConfigRegister1 x;

fun rec'ConfigRegister2 x =
  {M = BitsN.bit(x,31), SA = BitsN.bits(3,0) x, SL = BitsN.bits(7,4) x,
   SS = BitsN.bits(11,8) x, SU = BitsN.bits(15,12) x,
   TA = BitsN.bits(19,16) x, TL = BitsN.bits(23,20) x,
   TS = BitsN.bits(27,24) x, TU = BitsN.bits(30,28) x};

fun reg'ConfigRegister2 x =
  case x of
     {M = M, SA = SA, SL = SL, SS = SS, SU = SU, TA = TA, TL = TL,
      TS = TS, TU = TU} =>
       BitsN.concat[BitsN.fromBit M,TU,TS,TL,TA,SU,SS,SL,SA];

fun write'rec'ConfigRegister2 (_,x) = reg'ConfigRegister2 x;

fun write'reg'ConfigRegister2 (_,x) = rec'ConfigRegister2 x;

fun rec'ConfigRegister3 x =
  {DSPP = BitsN.bit(x,10), LPA = BitsN.bit(x,7), M = BitsN.bit(x,31),
   MT = BitsN.bit(x,2), SM = BitsN.bit(x,1), SP = BitsN.bit(x,4),
   TL = BitsN.bit(x,0), ULRI = BitsN.bit(x,13), VEIC = BitsN.bit(x,6),
   VInt = BitsN.bit(x,5),
   configregister3'rst =
     BitsN.concat
       [BitsN.bits(3,3) x,BitsN.bits(9,8) x,BitsN.bits(12,11) x,
        BitsN.bits(30,14) x]};

fun reg'ConfigRegister3 x =
  case x of
     {DSPP = DSPP, LPA = LPA, M = M, MT = MT, SM = SM, SP = SP, TL = TL,
      ULRI = ULRI, VEIC = VEIC, VInt = VInt,
      configregister3'rst = configregister3'rst} =>
       BitsN.concat
         [BitsN.fromBit M,BitsN.bits(16,0) configregister3'rst,
          BitsN.fromBit ULRI,BitsN.bits(18,17) configregister3'rst,
          BitsN.fromBit DSPP,BitsN.bits(20,19) configregister3'rst,
          BitsN.fromBit LPA,BitsN.fromBit VEIC,BitsN.fromBit VInt,
          BitsN.fromBit SP,BitsN.bits(21,21) configregister3'rst,
          BitsN.fromBit MT,BitsN.fromBit SM,BitsN.fromBit TL];

fun write'rec'ConfigRegister3 (_,x) = reg'ConfigRegister3 x;

fun write'reg'ConfigRegister3 (_,x) = rec'ConfigRegister3 x;

fun rec'ConfigRegister6 x =
  {LTLB = BitsN.bit(x,2), TLBSize = BitsN.bits(31,16) x,
   configregister6'rst = BitsN.@@(BitsN.bits(1,0) x,BitsN.bits(15,3) x)};

fun reg'ConfigRegister6 x =
  case x of
     {LTLB = LTLB, TLBSize = TLBSize,
      configregister6'rst = configregister6'rst} =>
       BitsN.concat
         [TLBSize,BitsN.bits(12,0) configregister6'rst,BitsN.fromBit LTLB,
          BitsN.bits(14,13) configregister6'rst];

fun write'rec'ConfigRegister6 (_,x) = reg'ConfigRegister6 x;

fun write'reg'ConfigRegister6 (_,x) = rec'ConfigRegister6 x;

fun rec'CauseRegister x =
  {BD = BitsN.bit(x,31), ExcCode = BitsN.bits(6,2) x,
   IP = BitsN.bits(15,8) x, TI = BitsN.bit(x,30),
   causeregister'rst =
     BitsN.concat[BitsN.bits(1,0) x,BitsN.bits(7,7) x,BitsN.bits(29,16) x]};

fun reg'CauseRegister x =
  case x of
     {BD = BD, ExcCode = ExcCode, IP = IP, TI = TI,
      causeregister'rst = causeregister'rst} =>
       BitsN.concat
         [BitsN.fromBit BD,BitsN.fromBit TI,
          BitsN.bits(13,0) causeregister'rst,IP,
          BitsN.bits(14,14) causeregister'rst,ExcCode,
          BitsN.bits(16,15) causeregister'rst];

fun write'rec'CauseRegister (_,x) = reg'CauseRegister x;

fun write'reg'CauseRegister (_,x) = rec'CauseRegister x;

fun rec'Context x =
  {BadVPN2 = BitsN.bits(22,4) x, PTEBase = BitsN.bits(63,23) x,
   context'rst = BitsN.bits(3,0) x};

fun reg'Context x =
  case x of
     {BadVPN2 = BadVPN2, PTEBase = PTEBase, context'rst = context'rst} =>
       BitsN.concat[PTEBase,BadVPN2,context'rst];

fun write'rec'Context (_,x) = reg'Context x;

fun write'reg'Context (_,x) = rec'Context x;

fun rec'XContext x =
  {BadVPN2 = BitsN.bits(30,4) x, PTEBase = BitsN.bits(63,33) x,
   R = BitsN.bits(32,31) x, xcontext'rst = BitsN.bits(3,0) x};

fun reg'XContext x =
  case x of
     {BadVPN2 = BadVPN2, PTEBase = PTEBase, R = R,
      xcontext'rst = xcontext'rst} =>
       BitsN.concat[PTEBase,R,BadVPN2,xcontext'rst];

fun write'rec'XContext (_,x) = reg'XContext x;

fun write'reg'XContext (_,x) = rec'XContext x;

fun rec'HWREna x =
  {CC = BitsN.bit(x,2), CCRes = BitsN.bit(x,3), CPUNum = BitsN.bit(x,0),
   UL = BitsN.bit(x,29),
   hwrena'rst =
     BitsN.concat
       [BitsN.bits(1,1) x,BitsN.bits(28,4) x,BitsN.bits(31,30) x]};

fun reg'HWREna x =
  case x of
     {CC = CC, CCRes = CCRes, CPUNum = CPUNum, UL = UL,
      hwrena'rst = hwrena'rst} =>
       BitsN.concat
         [BitsN.bits(1,0) hwrena'rst,BitsN.fromBit UL,
          BitsN.bits(26,2) hwrena'rst,BitsN.fromBit CCRes,
          BitsN.fromBit CC,BitsN.bits(27,27) hwrena'rst,
          BitsN.fromBit CPUNum];

fun write'rec'HWREna (_,x) = reg'HWREna x;

fun write'reg'HWREna (_,x) = rec'HWREna x;

fun ExceptionCode ExceptionType =
  let
    val x0 = #Cause((!CP0) : CP0)
  in
    CP0 :=
    (CP0_Cause_rupd
       ((!CP0),
        CauseRegister_ExcCode_rupd
          (x0,
           case ExceptionType of
              Int => BitsN.B(0x0,5)
            | Mod => BitsN.B(0x1,5)
            | TLBL => BitsN.B(0x2,5)
            | TLBS => BitsN.B(0x3,5)
            | AdEL => BitsN.B(0x4,5)
            | AdES => BitsN.B(0x5,5)
            | Sys => BitsN.B(0x8,5)
            | Bp => BitsN.B(0x9,5)
            | ResI => BitsN.B(0xA,5)
            | CpU => BitsN.B(0xB,5)
            | Ov => BitsN.B(0xC,5)
            | Tr => BitsN.B(0xD,5)
            | XTLBRefillL => BitsN.B(0x2,5)
            | XTLBRefillS => BitsN.B(0x3,5))))
  end;

fun SignalException ExceptionType =
  ( if not(#EXL((#Status((!CP0) : CP0)) : StatusRegister))
      then case (!BranchDelay) of
              Option.SOME(Option.SOME _) =>
                ( CP0 :=
                  (CP0_EPC_rupd((!CP0),BitsN.-((!PC),BitsN.B(0x4,64))))
                ; let
                    val x0 = #Cause((!CP0) : CP0)
                  in
                    CP0 :=
                    (CP0_Cause_rupd((!CP0),CauseRegister_BD_rupd(x0,true)))
                  end
                )
            | _ =>
              ( CP0 := (CP0_EPC_rupd((!CP0),(!PC)))
              ; let
                  val x0 = #Cause((!CP0) : CP0)
                in
                  CP0 :=
                  (CP0_Cause_rupd((!CP0),CauseRegister_BD_rupd(x0,false)))
                end
              )
    else ()
  ; let
      val vectorOffset =
        if ((ExceptionType = XTLBRefillL) orelse
            (ExceptionType = XTLBRefillS)) andalso
           (not(#EXL((#Status((!CP0) : CP0)) : StatusRegister)))
          then BitsN.B(0x80,30)
        else BitsN.B(0x180,30)
    in
      ( ExceptionCode ExceptionType
      ; let
          val x0 = #Status((!CP0) : CP0)
        in
          CP0 :=
          (CP0_Status_rupd((!CP0),StatusRegister_EXL_rupd(x0,true)))
        end
      ; let
          val vectorBase =
            if #BEV((#Status((!CP0) : CP0)) : StatusRegister)
              then BitsN.B(0xFFFFFFFFBFC00200,64)
            else BitsN.B(0xFFFFFFFF80000000,64)
        in
          ( BranchDelay := NONE
          ; PC :=
            (BitsN.-
               (BitsN.@@
                  (BitsN.bits(63,30) vectorBase,
                   BitsN.+(BitsN.bits(29,0) vectorBase,vectorOffset)),
                BitsN.B(0x4,64)))
          ; exceptionSignalled := true
          )
        end
      )
    end
  );

val BYTE = BitsN.B(0x0,3)

val HALFWORD = BitsN.B(0x1,3)

val WORD = BitsN.B(0x3,3)

val DOUBLEWORD = BitsN.B(0x7,3)

fun UserMode () =
  ((#KSU((#Status((!CP0) : CP0)) : StatusRegister)) = (BitsN.B(0x2,2))) andalso
  (not((#EXL((#Status((!CP0) : CP0)) : StatusRegister)) orelse
       (#ERL((#Status((!CP0) : CP0)) : StatusRegister))));

fun SupervisorMode () =
  ((#KSU((#Status((!CP0) : CP0)) : StatusRegister)) = (BitsN.B(0x1,2))) andalso
  (not((#EXL((#Status((!CP0) : CP0)) : StatusRegister)) orelse
       (#ERL((#Status((!CP0) : CP0)) : StatusRegister))));

fun KernelMode () =
  ((#KSU((#Status((!CP0) : CP0)) : StatusRegister)) = (BitsN.B(0x0,2))) orelse
  ((#EXL((#Status((!CP0) : CP0)) : StatusRegister)) orelse
   (#ERL((#Status((!CP0) : CP0)) : StatusRegister)));

fun BigEndianMem () = #BE((#Config((!CP0) : CP0)) : ConfigRegister);

fun ReverseEndian () =
  BitsN.fromBit
    ((#RE((#Status((!CP0) : CP0)) : StatusRegister)) andalso (UserMode ()));

fun BigEndianCPU () =
  BitsN.??(BitsN.fromBit(BigEndianMem ()),ReverseEndian ());

fun GPR n =
  if n = (BitsN.B(0x0,5))
    then BitsN.B(0x0,64)
  else Map.lookup((!gpr),BitsN.toNat n);

fun write'GPR (value,n) =
  if not(n = (BitsN.B(0x0,5)))
    then gpr := (Map.update((!gpr),BitsN.toNat n,value))
  else ();

fun HI () =
  case (!hi) of Option.SOME v => v | NONE => raise UNPREDICTABLE ("HI");

fun write'HI value = hi := (Option.SOME value);

fun LO () =
  case (!lo) of Option.SOME v => v | NONE => raise UNPREDICTABLE ("LO");

fun write'LO value = lo := (Option.SOME value);

fun CPR (n,(reg,sel)) =
  case (n,(reg,sel)) of
     (0,(BitsN.B(0x8,_),BitsN.B(0x0,_))) => #BadVAddr((!CP0) : CP0)
   | (0,(BitsN.B(0x9,_),BitsN.B(0x0,_))) =>
     BitsN.fromNat(BitsN.toNat(#Count((!CP0) : CP0)),64)
   | (0,(BitsN.B(0xB,_),BitsN.B(0x0,_))) =>
     BitsN.fromNat(BitsN.toNat(#Compare((!CP0) : CP0)),64)
   | (0,(BitsN.B(0xC,_),BitsN.B(0x0,_))) =>
     BitsN.fromNat
       (BitsN.toNat(reg'StatusRegister(#Status((!CP0) : CP0))),64)
   | (0,(BitsN.B(0xD,_),BitsN.B(0x0,_))) =>
     BitsN.fromNat
       (BitsN.toNat(reg'CauseRegister(#Cause((!CP0) : CP0))),64)
   | (0,(BitsN.B(0xE,_),BitsN.B(0x0,_))) => #EPC((!CP0) : CP0)
   | (0,(BitsN.B(0xF,_),BitsN.B(0x0,_))) =>
     BitsN.fromNat(BitsN.toNat(#PRId((!CP0) : CP0)),64)
   | (0,(BitsN.B(0x10,_),BitsN.B(0x0,_))) =>
     BitsN.fromNat
       (BitsN.toNat(reg'ConfigRegister(#Config((!CP0) : CP0))),64)
   | (0,(BitsN.B(0x11,_),BitsN.B(0x0,_))) => #LLAddr((!CP0) : CP0)
   | (0,(BitsN.B(0x17,_),BitsN.B(0x0,_))) =>
     BitsN.fromNat(BitsN.toNat(#Debug((!CP0) : CP0)),64)
   | (0,(BitsN.B(0x1A,_),BitsN.B(0x0,_))) =>
     BitsN.fromNat(BitsN.toNat(#ErrCtl((!CP0) : CP0)),64)
   | (0,(BitsN.B(0x1E,_),BitsN.B(0x0,_))) => #ErrorEPC((!CP0) : CP0)
   | _ => BitsN.B(0x0,64);

fun write'CPR (value,(n,(reg,sel))) =
  case (n,(reg,sel)) of
     (0,(BitsN.B(0x9,_),BitsN.B(0x0,_))) =>
       CP0 := (CP0_Count_rupd((!CP0),BitsN.bits(31,0) value))
   | (0,(BitsN.B(0xB,_),BitsN.B(0x0,_))) =>
     CP0 := (CP0_Compare_rupd((!CP0),BitsN.bits(31,0) value))
   | (0,(BitsN.B(0xC,_),BitsN.B(0x0,_))) =>
     let
       val x0 = #Status((!CP0) : CP0)
     in
       CP0 :=
       (CP0_Status_rupd
          ((!CP0),write'reg'StatusRegister(x0,BitsN.bits(31,0) value)))
     end
   | (0,(BitsN.B(0xD,_),BitsN.B(0x0,_))) =>
     let
       val x0 = #Cause((!CP0) : CP0)
     in
       CP0 :=
       (CP0_Cause_rupd
          ((!CP0),write'reg'CauseRegister(x0,BitsN.bits(31,0) value)))
     end
   | (0,(BitsN.B(0xE,_),BitsN.B(0x0,_))) =>
     CP0 := (CP0_EPC_rupd((!CP0),value))
   | (0,(BitsN.B(0x10,_),BitsN.B(0x0,_))) =>
     let
       val x0 = #Config((!CP0) : CP0)
     in
       CP0 :=
       (CP0_Config_rupd
          ((!CP0),write'reg'ConfigRegister(x0,BitsN.bits(31,0) value)))
     end
   | (0,(BitsN.B(0x17,_),BitsN.B(0x0,_))) =>
     CP0 := (CP0_Debug_rupd((!CP0),BitsN.bits(31,0) value))
   | (0,(BitsN.B(0x1A,_),BitsN.B(0x0,_))) =>
     CP0 := (CP0_ErrCtl_rupd((!CP0),BitsN.bits(31,0) value))
   | (0,(BitsN.B(0x1E,_),BitsN.B(0x0,_))) =>
     CP0 := (CP0_ErrorEPC_rupd((!CP0),value))
   | _ => ();

val PSIZE = 64

fun AddressTranslation (vAddr,(IorD,LorS)) = (vAddr,BitsN.B(0x2,3));

fun LoadMemory (CCA,(AccessLength,(pAddr,(vAddr,IorD)))) =
  let
    val a = BitsN.&&(pAddr,BitsN.~(BitsN.B(0x7,64)))
  in
    if BigEndianMem ()
      then BitsN.concat
             [Map.lookup((!MEM),BitsN.toNat a),
              Map.lookup((!MEM),BitsN.toNat(BitsN.+(a,BitsN.B(0x1,64)))),
              Map.lookup((!MEM),BitsN.toNat(BitsN.+(a,BitsN.B(0x2,64)))),
              Map.lookup((!MEM),BitsN.toNat(BitsN.+(a,BitsN.B(0x3,64)))),
              Map.lookup((!MEM),BitsN.toNat(BitsN.+(a,BitsN.B(0x4,64)))),
              Map.lookup((!MEM),BitsN.toNat(BitsN.+(a,BitsN.B(0x5,64)))),
              Map.lookup((!MEM),BitsN.toNat(BitsN.+(a,BitsN.B(0x6,64)))),
              Map.lookup((!MEM),BitsN.toNat(BitsN.+(a,BitsN.B(0x7,64))))]
    else BitsN.concat
           [Map.lookup((!MEM),BitsN.toNat(BitsN.+(a,BitsN.B(0x7,64)))),
            Map.lookup((!MEM),BitsN.toNat(BitsN.+(a,BitsN.B(0x6,64)))),
            Map.lookup((!MEM),BitsN.toNat(BitsN.+(a,BitsN.B(0x5,64)))),
            Map.lookup((!MEM),BitsN.toNat(BitsN.+(a,BitsN.B(0x4,64)))),
            Map.lookup((!MEM),BitsN.toNat(BitsN.+(a,BitsN.B(0x3,64)))),
            Map.lookup((!MEM),BitsN.toNat(BitsN.+(a,BitsN.B(0x2,64)))),
            Map.lookup((!MEM),BitsN.toNat(BitsN.+(a,BitsN.B(0x1,64)))),
            Map.lookup((!MEM),BitsN.toNat a)]
  end;

fun StoreMemory (CCA,(AccessLength,(MemElem,(pAddr,(vAddr,IorD))))) =
  let
    val a = BitsN.&&(pAddr,BitsN.~(BitsN.B(0x7,64)))
    val l = BitsN.bits(2,0) pAddr
    val h = BitsN.+(l,AccessLength)
  in
    if BigEndianMem ()
      then ( if l = (BitsN.B(0x0,3))
               then MEM :=
                    (Map.update
                       ((!MEM),BitsN.toNat a,BitsN.bits(63,56) MemElem))
             else ()
           ; if (BitsN.<=+(l,BitsN.B(0x1,3))) andalso
                (BitsN.<=+(BitsN.B(0x1,3),h))
               then let
                      val x = BitsN.+(a,BitsN.B(0x1,64))
                    in
                      MEM :=
                      (Map.update
                         ((!MEM),BitsN.toNat x,BitsN.bits(55,48) MemElem))
                    end
             else ()
           ; if (BitsN.<=+(l,BitsN.B(0x2,3))) andalso
                (BitsN.<=+(BitsN.B(0x2,3),h))
               then let
                      val x = BitsN.+(a,BitsN.B(0x2,64))
                    in
                      MEM :=
                      (Map.update
                         ((!MEM),BitsN.toNat x,BitsN.bits(47,40) MemElem))
                    end
             else ()
           ; if (BitsN.<=+(l,BitsN.B(0x3,3))) andalso
                (BitsN.<=+(BitsN.B(0x3,3),h))
               then let
                      val x = BitsN.+(a,BitsN.B(0x3,64))
                    in
                      MEM :=
                      (Map.update
                         ((!MEM),BitsN.toNat x,BitsN.bits(39,32) MemElem))
                    end
             else ()
           ; if (BitsN.<=+(l,BitsN.B(0x4,3))) andalso
                (BitsN.<=+(BitsN.B(0x4,3),h))
               then let
                      val x = BitsN.+(a,BitsN.B(0x4,64))
                    in
                      MEM :=
                      (Map.update
                         ((!MEM),BitsN.toNat x,BitsN.bits(31,24) MemElem))
                    end
             else ()
           ; if (BitsN.<=+(l,BitsN.B(0x5,3))) andalso
                (BitsN.<=+(BitsN.B(0x5,3),h))
               then let
                      val x = BitsN.+(a,BitsN.B(0x5,64))
                    in
                      MEM :=
                      (Map.update
                         ((!MEM),BitsN.toNat x,BitsN.bits(23,16) MemElem))
                    end
             else ()
           ; if (BitsN.<=+(l,BitsN.B(0x6,3))) andalso
                (BitsN.<=+(BitsN.B(0x6,3),h))
               then let
                      val x = BitsN.+(a,BitsN.B(0x6,64))
                    in
                      MEM :=
                      (Map.update
                         ((!MEM),BitsN.toNat x,BitsN.bits(15,8) MemElem))
                    end
             else ()
           ; if (BitsN.<=+(l,BitsN.B(0x7,3))) andalso
                (BitsN.<=+(BitsN.B(0x7,3),h))
               then let
                      val x = BitsN.+(a,BitsN.B(0x7,64))
                    in
                      MEM :=
                      (Map.update
                         ((!MEM),BitsN.toNat x,BitsN.bits(7,0) MemElem))
                    end
             else ()
           )
    else ( if (BitsN.<=+(l,BitsN.B(0x7,3))) andalso
              (BitsN.<=+(BitsN.B(0x7,3),h))
             then let
                    val x = BitsN.+(a,BitsN.B(0x7,64))
                  in
                    MEM :=
                    (Map.update
                       ((!MEM),BitsN.toNat x,BitsN.bits(63,56) MemElem))
                  end
           else ()
         ; if (BitsN.<=+(l,BitsN.B(0x6,3))) andalso
              (BitsN.<=+(BitsN.B(0x6,3),h))
             then let
                    val x = BitsN.+(a,BitsN.B(0x6,64))
                  in
                    MEM :=
                    (Map.update
                       ((!MEM),BitsN.toNat x,BitsN.bits(55,48) MemElem))
                  end
           else ()
         ; if (BitsN.<=+(l,BitsN.B(0x5,3))) andalso
              (BitsN.<=+(BitsN.B(0x5,3),h))
             then let
                    val x = BitsN.+(a,BitsN.B(0x5,64))
                  in
                    MEM :=
                    (Map.update
                       ((!MEM),BitsN.toNat x,BitsN.bits(47,40) MemElem))
                  end
           else ()
         ; if (BitsN.<=+(l,BitsN.B(0x4,3))) andalso
              (BitsN.<=+(BitsN.B(0x4,3),h))
             then let
                    val x = BitsN.+(a,BitsN.B(0x4,64))
                  in
                    MEM :=
                    (Map.update
                       ((!MEM),BitsN.toNat x,BitsN.bits(39,32) MemElem))
                  end
           else ()
         ; if (BitsN.<=+(l,BitsN.B(0x3,3))) andalso
              (BitsN.<=+(BitsN.B(0x3,3),h))
             then let
                    val x = BitsN.+(a,BitsN.B(0x3,64))
                  in
                    MEM :=
                    (Map.update
                       ((!MEM),BitsN.toNat x,BitsN.bits(31,24) MemElem))
                  end
           else ()
         ; if (BitsN.<=+(l,BitsN.B(0x2,3))) andalso
              (BitsN.<=+(BitsN.B(0x2,3),h))
             then let
                    val x = BitsN.+(a,BitsN.B(0x2,64))
                  in
                    MEM :=
                    (Map.update
                       ((!MEM),BitsN.toNat x,BitsN.bits(23,16) MemElem))
                  end
           else ()
         ; if (BitsN.<=+(l,BitsN.B(0x1,3))) andalso
              (BitsN.<=+(BitsN.B(0x1,3),h))
             then let
                    val x = BitsN.+(a,BitsN.B(0x1,64))
                  in
                    MEM :=
                    (Map.update
                       ((!MEM),BitsN.toNat x,BitsN.bits(15,8) MemElem))
                  end
           else ()
         ; if l = (BitsN.B(0x0,3))
             then MEM :=
                  (Map.update
                     ((!MEM),BitsN.toNat a,BitsN.bits(7,0) MemElem))
           else ()
         )
  end;

fun Fetch () =
  if (BitsN.bits(1,0) (!PC)) = (BitsN.B(0x0,2))
    then let
           val vAddr = (!PC)
           val (pAddr,CCA) = AddressTranslation(vAddr,(INSTRUCTION,LOAD))
           val memdoubleword =
             LoadMemory(CCA,(WORD,(pAddr,(vAddr,INSTRUCTION))))
           val bytesel =
             BitsN.??
               (BitsN.bits(2,0) vAddr,
                BitsN.@@(BigEndianCPU (),BitsN.B(0x0,2)))
           val memword =
             BitsN.bits
               (Nat.+(31,Nat.*(8,BitsN.toNat bytesel)),
                Nat.*(8,BitsN.toNat bytesel))
               memdoubleword
         in
           Option.SOME memword
         end
  else ( SignalException AdEL; NONE );

fun NotWordValue value =
  let
    val top = BitsN.bits(63,32) value
  in
    if BitsN.bit(value,31)
      then not(top = (BitsN.B(0xFFFFFFFF,32)))
    else not(top = (BitsN.B(0x0,32)))
  end;

fun dfn'ADDI (rs,(rt,immediate)) =
  ( if NotWordValue(GPR rs)
      then raise UNPREDICTABLE ("ADDI: NotWordValue")
    else ()
  ; let
      val temp =
        BitsN.+(BitsN.bits(32,0) (GPR rs),BitsN.signExtend 33 immediate)
    in
      if not((BitsN.bit(temp,32)) = (BitsN.bit(temp,31)))
        then SignalException Ov
      else write'GPR(BitsN.signExtend 64 (BitsN.bits(31,0) temp),rt)
    end
  );

fun dfn'ADDIU (rs,(rt,immediate)) =
  ( if NotWordValue(GPR rs)
      then raise UNPREDICTABLE ("ADDIU: NotWordValue")
    else ()
  ; let
      val temp =
        BitsN.+(BitsN.bits(31,0) (GPR rs),BitsN.signExtend 32 immediate)
    in
      write'GPR(BitsN.signExtend 64 temp,rt)
    end
  );

fun dfn'DADDI (rs,(rt,immediate)) =
  let
    val temp =
      BitsN.+(BitsN.signExtend 65 (GPR rs),BitsN.signExtend 65 immediate)
  in
    if not((BitsN.bit(temp,64)) = (BitsN.bit(temp,63)))
      then SignalException Ov
    else write'GPR(BitsN.bits(63,0) temp,rt)
  end;

fun dfn'DADDIU (rs,(rt,immediate)) =
  write'GPR(BitsN.+(GPR rs,BitsN.signExtend 64 immediate),rt);

fun dfn'SLTI (rs,(rt,immediate)) =
  write'GPR
    (BitsN.fromBool 64 (BitsN.<(GPR rs,BitsN.signExtend 64 immediate)),rt);

fun dfn'SLTIU (rs,(rt,immediate)) =
  write'GPR
    (BitsN.fromBool 64 (BitsN.<+(GPR rs,BitsN.signExtend 64 immediate)),rt);

fun dfn'ANDI (rs,(rt,immediate)) =
  write'GPR(BitsN.&&(GPR rs,BitsN.zeroExtend 64 immediate),rt);

fun dfn'ORI (rs,(rt,immediate)) =
  write'GPR(BitsN.||(GPR rs,BitsN.zeroExtend 64 immediate),rt);

fun dfn'XORI (rs,(rt,immediate)) =
  write'GPR(BitsN.??(GPR rs,BitsN.zeroExtend 64 immediate),rt);

fun dfn'LUI (rt,immediate) =
  write'GPR(BitsN.signExtend 64 (BitsN.@@(immediate,BitsN.B(0x0,16))),rt);

fun dfn'ADD (rs,(rt,rd)) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("ADD: NotWordValue")
    else ()
  ; let
      val temp =
        BitsN.+(BitsN.bits(32,0) (GPR rs),BitsN.bits(32,0) (GPR rt))
    in
      if not((BitsN.bit(temp,32)) = (BitsN.bit(temp,31)))
        then SignalException Ov
      else write'GPR(BitsN.signExtend 64 (BitsN.bits(31,0) temp),rd)
    end
  );

fun dfn'ADDU (rs,(rt,rd)) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("ADDU: NotWordValue")
    else ()
  ; let
      val temp =
        BitsN.+(BitsN.bits(31,0) (GPR rs),BitsN.bits(31,0) (GPR rt))
    in
      write'GPR(BitsN.signExtend 64 temp,rd)
    end
  );

fun dfn'SUB (rs,(rt,rd)) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("SUB: NotWordValue")
    else ()
  ; let
      val temp =
        BitsN.-(BitsN.bits(32,0) (GPR rs),BitsN.bits(32,0) (GPR rt))
    in
      if not((BitsN.bit(temp,32)) = (BitsN.bit(temp,31)))
        then SignalException Ov
      else write'GPR(BitsN.signExtend 64 (BitsN.bits(31,0) temp),rd)
    end
  );

fun dfn'SUBU (rs,(rt,rd)) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("SUBU: NotWordValue")
    else ()
  ; let
      val temp =
        BitsN.-(BitsN.bits(31,0) (GPR rs),BitsN.bits(31,0) (GPR rt))
    in
      write'GPR(BitsN.signExtend 64 temp,rd)
    end
  );

fun dfn'DADD (rs,(rt,rd)) =
  let
    val temp =
      BitsN.+(BitsN.signExtend 65 (GPR rs),BitsN.signExtend 65 (GPR rt))
  in
    if not((BitsN.bit(temp,64)) = (BitsN.bit(temp,63)))
      then SignalException Ov
    else write'GPR(BitsN.bits(63,0) temp,rd)
  end;

fun dfn'DADDU (rs,(rt,rd)) = write'GPR(BitsN.+(GPR rs,GPR rt),rd);

fun dfn'DSUB (rs,(rt,rd)) =
  let
    val temp =
      BitsN.-(BitsN.signExtend 65 (GPR rs),BitsN.signExtend 65 (GPR rt))
  in
    if not((BitsN.bit(temp,64)) = (BitsN.bit(temp,63)))
      then SignalException Ov
    else write'GPR(BitsN.bits(63,0) temp,rd)
  end;

fun dfn'DSUBU (rs,(rt,rd)) = write'GPR(BitsN.-(GPR rs,GPR rt),rd);

fun dfn'SLT (rs,(rt,rd)) =
  write'GPR(BitsN.fromBool 64 (BitsN.<(GPR rs,GPR rt)),rd);

fun dfn'SLTU (rs,(rt,rd)) =
  write'GPR(BitsN.fromBool 64 (BitsN.<+(GPR rs,GPR rt)),rd);

fun dfn'AND (rs,(rt,rd)) = write'GPR(BitsN.&&(GPR rs,GPR rt),rd);

fun dfn'OR (rs,(rt,rd)) = write'GPR(BitsN.||(GPR rs,GPR rt),rd);

fun dfn'XOR (rs,(rt,rd)) = write'GPR(BitsN.??(GPR rs,GPR rt),rd);

fun dfn'NOR (rs,(rt,rd)) = write'GPR(BitsN.~(BitsN.||(GPR rs,GPR rt)),rd);

fun dfn'MOVN (rs,(rt,rd)) =
  if not((GPR rt) = (BitsN.B(0x0,64))) then write'GPR(GPR rs,rd) else ();

fun dfn'MOVZ (rs,(rt,rd)) =
  if (GPR rt) = (BitsN.B(0x0,64)) then write'GPR(GPR rs,rd) else ();

fun dfn'MADD (rs,rt) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("MADD: NotWordValue")
    else ()
  ; let
      val temp =
        BitsN.+
          (BitsN.@@(BitsN.bits(31,0) (HI ()),BitsN.bits(31,0) (LO ())),
           BitsN.*
             (BitsN.signExtend 64 (BitsN.bits(31,0) (GPR rs)),
              BitsN.signExtend 64 (BitsN.bits(31,0) (GPR rt))))
    in
      ( write'HI(BitsN.signExtend 64 (BitsN.bits(63,32) temp))
      ; write'LO(BitsN.signExtend 64 (BitsN.bits(31,0) temp))
      )
    end
  );

fun dfn'MADDU (rs,rt) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("MADDU: NotWordValue")
    else ()
  ; let
      val temp =
        BitsN.+
          (BitsN.@@(BitsN.bits(31,0) (HI ()),BitsN.bits(31,0) (LO ())),
           BitsN.*
             (BitsN.zeroExtend 64 (BitsN.bits(31,0) (GPR rs)),
              BitsN.zeroExtend 64 (BitsN.bits(31,0) (GPR rt))))
    in
      ( write'HI(BitsN.signExtend 64 (BitsN.bits(63,32) temp))
      ; write'LO(BitsN.signExtend 64 (BitsN.bits(31,0) temp))
      )
    end
  );

fun dfn'MSUB (rs,rt) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("MSUB: NotWordValue")
    else ()
  ; let
      val temp =
        BitsN.-
          (BitsN.@@(BitsN.bits(31,0) (HI ()),BitsN.bits(31,0) (LO ())),
           BitsN.*
             (BitsN.signExtend 64 (BitsN.bits(31,0) (GPR rs)),
              BitsN.signExtend 64 (BitsN.bits(31,0) (GPR rt))))
    in
      ( write'HI(BitsN.signExtend 64 (BitsN.bits(63,32) temp))
      ; write'LO(BitsN.signExtend 64 (BitsN.bits(31,0) temp))
      )
    end
  );

fun dfn'MSUBU (rs,rt) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("MSUBU: NotWordValue")
    else ()
  ; let
      val temp =
        BitsN.-
          (BitsN.@@(BitsN.bits(31,0) (HI ()),BitsN.bits(31,0) (LO ())),
           BitsN.*
             (BitsN.zeroExtend 64 (BitsN.bits(31,0) (GPR rs)),
              BitsN.zeroExtend 64 (BitsN.bits(31,0) (GPR rt))))
    in
      ( write'HI(BitsN.signExtend 64 (BitsN.bits(63,32) temp))
      ; write'LO(BitsN.signExtend 64 (BitsN.bits(31,0) temp))
      )
    end
  );

fun dfn'MUL (rs,(rt,rd)) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("MUL: NotWordValue")
    else ()
  ; write'GPR
      (BitsN.signExtend 64
         (BitsN.*(BitsN.bits(31,0) (GPR rs),BitsN.bits(31,0) (GPR rt))),rd)
  ; lo := NONE
  ; hi := NONE
  );

fun dfn'MULT (rs,rt) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("MULT: NotWordValue")
    else ()
  ; let
      val prod =
        BitsN.*
          (BitsN.signExtend 64 (BitsN.bits(31,0) (GPR rs)),
           BitsN.signExtend 64 (BitsN.bits(31,0) (GPR rt)))
    in
      ( write'LO(BitsN.signExtend 64 (BitsN.bits(31,0) prod))
      ; write'HI(BitsN.signExtend 64 (BitsN.bits(63,32) prod))
      )
    end
  );

fun dfn'MULTU (rs,rt) =
  ( if (NotWordValue(GPR rs)) orelse (NotWordValue(GPR rt))
      then raise UNPREDICTABLE ("MULTU: NotWordValue")
    else ()
  ; let
      val prod =
        BitsN.*
          (BitsN.zeroExtend 64 (BitsN.bits(31,0) (GPR rs)),
           BitsN.zeroExtend 64 (BitsN.bits(31,0) (GPR rt)))
    in
      ( write'LO(BitsN.signExtend 64 (BitsN.bits(31,0) prod))
      ; write'HI(BitsN.signExtend 64 (BitsN.bits(63,32) prod))
      )
    end
  );

fun dfn'DMULT (rs,rt) =
  let
    val prod =
      BitsN.*(BitsN.signExtend 128 (GPR rs),BitsN.signExtend 128 (GPR rt))
  in
    ( write'LO(BitsN.bits(63,0) prod); write'HI(BitsN.bits(127,64) prod) )
  end;

fun dfn'DMULTU (rs,rt) =
  let
    val prod =
      BitsN.*(BitsN.zeroExtend 128 (GPR rs),BitsN.zeroExtend 128 (GPR rt))
  in
    ( write'LO(BitsN.bits(63,0) prod); write'HI(BitsN.bits(127,64) prod) )
  end;

fun dfn'DIV (rs,rt) =
  let
    val s = GPR rs
    val t = GPR rt
  in
    ( if (NotWordValue s) orelse (NotWordValue t)
        then raise UNPREDICTABLE ("DIV: NotWordValue")
      else ()
    ; if t = (BitsN.B(0x0,64))
        then ( lo := NONE; hi := NONE )
      else let
             val q = BitsN.quot(BitsN.bits(31,0) s,BitsN.bits(31,0) t)
             val r = BitsN.rem(BitsN.bits(31,0) s,BitsN.bits(31,0) t)
           in
             ( write'LO(BitsN.signExtend 64 q)
             ; write'HI(BitsN.signExtend 64 r)
             )
           end
    )
  end;

fun dfn'DIVU (rs,rt) =
  let
    val s = GPR rs
    val t = GPR rt
  in
    ( if (NotWordValue s) orelse (NotWordValue t)
        then raise UNPREDICTABLE ("DIVU: NotWordValue")
      else ()
    ; if t = (BitsN.B(0x0,64))
        then ( lo := NONE; hi := NONE )
      else let
             val q = BitsN.div(BitsN.bits(31,0) s,BitsN.bits(31,0) t)
             val r = BitsN.mod(BitsN.bits(31,0) s,BitsN.bits(31,0) t)
           in
             ( write'LO(BitsN.signExtend 64 q)
             ; write'HI(BitsN.signExtend 64 r)
             )
           end
    )
  end;

fun dfn'DDIV (rs,rt) =
  let
    val t = GPR rt
  in
    if t = (BitsN.B(0x0,64))
      then ( lo := NONE; hi := NONE )
    else let
           val s = GPR rs
         in
           ( write'LO(BitsN.quot(s,t)); write'HI(BitsN.rem(s,t)) )
         end
  end;

fun dfn'DDIVU (rs,rt) =
  let
    val t = GPR rt
  in
    if t = (BitsN.B(0x0,64))
      then ( lo := NONE; hi := NONE )
    else let
           val s = GPR rs
         in
           ( write'LO(BitsN.div(s,t)); write'HI(BitsN.mod(s,t)) )
         end
  end;

fun dfn'MFHI rd = write'GPR(HI (),rd);

fun dfn'MFLO rd = write'GPR(LO (),rd);

fun dfn'MTHI rs = write'HI(GPR rs);

fun dfn'MTLO rs = write'LO(GPR rs);

fun dfn'SLL (rt,(rd,sa)) =
  write'GPR
    (BitsN.signExtend 64
       (BitsN.<<(BitsN.bits(31,0) (GPR rt),BitsN.toNat sa)),rd);

fun dfn'SRL (rt,(rd,sa)) =
  ( if NotWordValue(GPR rt)
      then raise UNPREDICTABLE ("SRL: NotWordValue")
    else ()
  ; write'GPR
      (BitsN.signExtend 64
         (BitsN.>>+(BitsN.bits(31,0) (GPR rt),BitsN.toNat sa)),rd)
  );

fun dfn'SRA (rt,(rd,sa)) =
  ( if NotWordValue(GPR rt)
      then raise UNPREDICTABLE ("SRA: NotWordValue")
    else ()
  ; write'GPR
      (BitsN.signExtend 64
         (BitsN.>>(BitsN.bits(31,0) (GPR rt),BitsN.toNat sa)),rd)
  );

fun dfn'SLLV (rs,(rt,rd)) =
  let
    val sa = BitsN.bits(4,0) (GPR rs)
  in
    write'GPR
      (BitsN.signExtend 64
         (BitsN.<<(BitsN.bits(31,0) (GPR rt),BitsN.toNat sa)),rd)
  end;

fun dfn'SRLV (rs,(rt,rd)) =
  ( if NotWordValue(GPR rt)
      then raise UNPREDICTABLE ("SRLV: NotWordValue")
    else ()
  ; let
      val sa = BitsN.bits(4,0) (GPR rs)
    in
      write'GPR
        (BitsN.signExtend 64
           (BitsN.>>+(BitsN.bits(31,0) (GPR rt),BitsN.toNat sa)),rd)
    end
  );

fun dfn'SRAV (rs,(rt,rd)) =
  ( if NotWordValue(GPR rt)
      then raise UNPREDICTABLE ("SRAV: NotWordValue")
    else ()
  ; let
      val sa = BitsN.bits(4,0) (GPR rs)
    in
      write'GPR
        (BitsN.signExtend 64
           (BitsN.>>(BitsN.bits(31,0) (GPR rt),BitsN.toNat sa)),rd)
    end
  );

fun dfn'DSLL (rt,(rd,sa)) = write'GPR(BitsN.<<(GPR rt,BitsN.toNat sa),rd);

fun dfn'DSRL (rt,(rd,sa)) =
  write'GPR(BitsN.>>+(GPR rt,BitsN.toNat sa),rd);

fun dfn'DSRA (rt,(rd,sa)) = write'GPR(BitsN.>>(GPR rt,BitsN.toNat sa),rd);

fun dfn'DSLLV (rs,(rt,rd)) =
  let
    val sa = BitsN.bits(5,0) (GPR rs)
  in
    write'GPR(BitsN.<<(GPR rt,BitsN.toNat sa),rd)
  end;

fun dfn'DSRLV (rs,(rt,rd)) =
  let
    val sa = BitsN.bits(5,0) (GPR rs)
  in
    write'GPR(BitsN.>>+(GPR rt,BitsN.toNat sa),rd)
  end;

fun dfn'DSRAV (rs,(rt,rd)) =
  let
    val sa = BitsN.bits(5,0) (GPR rs)
  in
    write'GPR(BitsN.>>(GPR rt,BitsN.toNat sa),rd)
  end;

fun dfn'DSLL32 (rt,(rd,sa)) =
  write'GPR(BitsN.<<(GPR rt,Nat.+(BitsN.toNat sa,32)),rd);

fun dfn'DSRL32 (rt,(rd,sa)) =
  write'GPR(BitsN.>>+(GPR rt,Nat.+(BitsN.toNat sa,32)),rd);

fun dfn'DSRA32 (rt,(rd,sa)) =
  write'GPR(BitsN.>>(GPR rt,Nat.+(BitsN.toNat sa,32)),rd);

fun dfn'TGE (rs,rt) =
  if BitsN.>=(GPR rs,GPR rt) then SignalException Tr else ();

fun dfn'TGEU (rs,rt) =
  if BitsN.>=+(GPR rs,GPR rt) then SignalException Tr else ();

fun dfn'TLT (rs,rt) =
  if BitsN.<(GPR rs,GPR rt) then SignalException Tr else ();

fun dfn'TLTU (rs,rt) =
  if BitsN.<+(GPR rs,GPR rt) then SignalException Tr else ();

fun dfn'TEQ (rs,rt) =
  if (GPR rs) = (GPR rt) then SignalException Tr else ();

fun dfn'TNE (rs,rt) =
  if not((GPR rs) = (GPR rt)) then SignalException Tr else ();

fun dfn'TGEI (rs,immediate) =
  if BitsN.>=(GPR rs,BitsN.signExtend 64 immediate)
    then SignalException Tr
  else ();

fun dfn'TGEIU (rs,immediate) =
  if BitsN.>=+(GPR rs,BitsN.signExtend 64 immediate)
    then SignalException Tr
  else ();

fun dfn'TLTI (rs,immediate) =
  if BitsN.<(GPR rs,BitsN.signExtend 64 immediate)
    then SignalException Tr
  else ();

fun dfn'TLTIU (rs,immediate) =
  if BitsN.<+(GPR rs,BitsN.signExtend 64 immediate)
    then SignalException Tr
  else ();

fun dfn'TEQI (rs,immediate) =
  if (GPR rs) = (BitsN.signExtend 64 immediate)
    then SignalException Tr
  else ();

fun dfn'TNEI (rs,immediate) =
  if not((GPR rs) = (BitsN.signExtend 64 immediate))
    then SignalException Tr
  else ();

fun loadByte (base,(rt,(offset,unsigned))) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
    val (pAddr,CCA) = AddressTranslation(vAddr,(DATA,LOAD))
  in
    if not (!exceptionSignalled)
      then let
             val pAddr =
               BitsN.@@
                 (BitsN.bits(Nat.-(PSIZE,1),3) pAddr,
                  BitsN.??
                    (BitsN.bits(2,0) pAddr,
                     BitsN.resize_replicate 3 (ReverseEndian (),3)))
             val memdoubleword =
               LoadMemory(CCA,(BYTE,(pAddr,(vAddr,DATA))))
             val byte =
               BitsN.??
                 (BitsN.bits(2,0) vAddr,
                  BitsN.resize_replicate 3 (BigEndianCPU (),3))
             val membyte =
               BitsN.bits
                 (Nat.+(7,Nat.*(8,BitsN.toNat byte)),
                  Nat.*(8,BitsN.toNat byte))
                 memdoubleword
           in
             ( write'GPR
                 (if unsigned
                    then BitsN.zeroExtend 64 membyte
                  else BitsN.signExtend 64 membyte,rt)
             ; LLbit := NONE
             )
           end
    else ()
  end;

fun loadHalf (base,(rt,(offset,unsigned))) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
  in
    if BitsN.bit(vAddr,0)
      then ( CP0 := (CP0_BadVAddr_rupd((!CP0),vAddr))
           ; SignalException AdEL
           )
    else let
           val (pAddr,CCA) = AddressTranslation(vAddr,(DATA,LOAD))
         in
           if not (!exceptionSignalled)
             then let
                    val pAddr =
                      BitsN.@@
                        (BitsN.bits(Nat.-(PSIZE,1),3) pAddr,
                         BitsN.??
                           (BitsN.bits(2,0) pAddr,
                            BitsN.@@
                              (BitsN.resize_replicate 2
                                 (ReverseEndian (),2),BitsN.B(0x0,1))))
                    val memdoubleword =
                      LoadMemory(CCA,(HALFWORD,(pAddr,(vAddr,DATA))))
                    val byte =
                      BitsN.??
                        (BitsN.bits(2,0) vAddr,
                         BitsN.@@
                           (BitsN.resize_replicate 2 (BigEndianCPU (),2),
                            BitsN.B(0x0,1)))
                    val memhalf =
                      BitsN.bits
                        (Nat.+(15,Nat.*(8,BitsN.toNat byte)),
                         Nat.*(8,BitsN.toNat byte))
                        memdoubleword
                  in
                    ( write'GPR
                        (if unsigned
                           then BitsN.zeroExtend 64 memhalf
                         else BitsN.signExtend 64 memhalf,rt)
                    ; LLbit := NONE
                    )
                  end
           else ()
         end
  end;

fun loadWord (link,(base,(rt,(offset,unsigned)))) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
  in
    if not((BitsN.bits(1,0) vAddr) = (BitsN.B(0x0,2)))
      then ( CP0 := (CP0_BadVAddr_rupd((!CP0),vAddr))
           ; SignalException AdEL
           )
    else let
           val (pAddr,CCA) = AddressTranslation(vAddr,(DATA,LOAD))
         in
           if not (!exceptionSignalled)
             then let
                    val pAddr =
                      BitsN.@@
                        (BitsN.bits(Nat.-(PSIZE,1),3) pAddr,
                         BitsN.??
                           (BitsN.bits(2,0) pAddr,
                            BitsN.@@(ReverseEndian (),BitsN.B(0x0,2))))
                    val memdoubleword =
                      LoadMemory(CCA,(WORD,(pAddr,(vAddr,DATA))))
                    val byte =
                      BitsN.??
                        (BitsN.bits(2,0) vAddr,
                         BitsN.@@(BigEndianCPU (),BitsN.B(0x0,2)))
                    val memword =
                      BitsN.bits
                        (Nat.+(31,Nat.*(8,BitsN.toNat byte)),
                         Nat.*(8,BitsN.toNat byte))
                        memdoubleword
                  in
                    ( write'GPR
                        (if unsigned
                           then BitsN.zeroExtend 64 memword
                         else BitsN.signExtend 64 memword,rt)
                    ; if link
                        then ( LLbit := (Option.SOME true)
                             ; CP0 := (CP0_LLAddr_rupd((!CP0),pAddr))
                             )
                      else LLbit := NONE
                    )
                  end
           else ()
         end
  end;

fun loadDoubleword (link,(base,(rt,offset))) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
  in
    if not((BitsN.bits(2,0) vAddr) = (BitsN.B(0x0,3)))
      then ( CP0 := (CP0_BadVAddr_rupd((!CP0),vAddr))
           ; SignalException AdEL
           )
    else let
           val (pAddr,CCA) = AddressTranslation(vAddr,(DATA,LOAD))
         in
           if not (!exceptionSignalled)
             then let
                    val memdoubleword =
                      LoadMemory(CCA,(DOUBLEWORD,(pAddr,(vAddr,DATA))))
                  in
                    ( write'GPR(memdoubleword,rt)
                    ; if link
                        then ( LLbit := (Option.SOME true)
                             ; CP0 := (CP0_LLAddr_rupd((!CP0),pAddr))
                             )
                      else LLbit := NONE
                    )
                  end
           else ()
         end
  end;

fun dfn'LB (base,(rt,offset)) = loadByte(base,(rt,(offset,false)));

fun dfn'LBU (base,(rt,offset)) = loadByte(base,(rt,(offset,true)));

fun dfn'LH (base,(rt,offset)) = loadHalf(base,(rt,(offset,false)));

fun dfn'LHU (base,(rt,offset)) = loadHalf(base,(rt,(offset,true)));

fun dfn'LW (base,(rt,offset)) =
  loadWord(false,(base,(rt,(offset,false))));

fun dfn'LWU (base,(rt,offset)) =
  loadWord(false,(base,(rt,(offset,true))));

fun dfn'LL (base,(rt,offset)) = loadWord(true,(base,(rt,(offset,false))));

fun dfn'LD (base,(rt,offset)) = loadDoubleword(false,(base,(rt,offset)));

fun dfn'LLD (base,(rt,offset)) = loadDoubleword(true,(base,(rt,offset)));

fun dfn'LWL (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
    val (pAddr,CCA) = AddressTranslation(vAddr,(DATA,LOAD))
  in
    if not (!exceptionSignalled)
      then let
             val pAddr =
               BitsN.@@
                 (BitsN.bits(Nat.-(PSIZE,1),3) pAddr,
                  BitsN.??
                    (BitsN.bits(2,0) pAddr,
                     BitsN.resize_replicate 3 (ReverseEndian (),3)))
             val pAddr =
               if BigEndianMem ()
                 then pAddr
               else BitsN.&&(pAddr,BitsN.~(BitsN.B(0x7,64)))
             val byte =
               BitsN.??
                 (BitsN.bits(1,0) vAddr,
                  BitsN.resize_replicate 2 (BigEndianCPU (),2))
             val word = BitsN.??(BitsN.bits(2,2) vAddr,BigEndianCPU ())
             val memdoubleword =
               LoadMemory
                 (CCA,(BitsN.@@(BitsN.B(0x0,1),byte),(pAddr,(vAddr,DATA))))
             val temp =
               case (word,byte) of
                  (BitsN.B(0x0,_),BitsN.B(0x0,_)) =>
                    BitsN.@@
                      (BitsN.bits(7,0) memdoubleword,
                       BitsN.bits(23,0) (GPR rt))
                | (BitsN.B(0x0,_),BitsN.B(0x1,_)) =>
                  BitsN.@@
                    (BitsN.bits(15,0) memdoubleword,
                     BitsN.bits(15,0) (GPR rt))
                | (BitsN.B(0x0,_),BitsN.B(0x2,_)) =>
                  BitsN.@@
                    (BitsN.bits(23,0) memdoubleword,
                     BitsN.bits(7,0) (GPR rt))
                | (BitsN.B(0x0,_),BitsN.B(0x3,_)) =>
                  BitsN.bits(31,0) memdoubleword
                | (BitsN.B(0x1,_),BitsN.B(0x0,_)) =>
                  BitsN.@@
                    (BitsN.bits(39,32) memdoubleword,
                     BitsN.bits(23,0) (GPR rt))
                | (BitsN.B(0x1,_),BitsN.B(0x1,_)) =>
                  BitsN.@@
                    (BitsN.bits(47,32) memdoubleword,
                     BitsN.bits(15,0) (GPR rt))
                | (BitsN.B(0x1,_),BitsN.B(0x2,_)) =>
                  BitsN.@@
                    (BitsN.bits(55,32) memdoubleword,
                     BitsN.bits(7,0) (GPR rt))
                | (BitsN.B(0x1,_),BitsN.B(0x3,_)) =>
                  BitsN.bits(63,32) memdoubleword
           in
             ( write'GPR(BitsN.signExtend 64 temp,rt); LLbit := NONE )
           end
    else ()
  end;

fun dfn'LWR (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
    val (pAddr,CCA) = AddressTranslation(vAddr,(DATA,LOAD))
  in
    if not (!exceptionSignalled)
      then let
             val pAddr =
               BitsN.@@
                 (BitsN.bits(Nat.-(PSIZE,1),3) pAddr,
                  BitsN.??
                    (BitsN.bits(2,0) pAddr,
                     BitsN.resize_replicate 3 (ReverseEndian (),3)))
             val pAddr =
               if BigEndianMem ()
                 then pAddr
               else BitsN.&&(pAddr,BitsN.~(BitsN.B(0x7,64)))
             val byte =
               BitsN.??
                 (BitsN.bits(1,0) vAddr,
                  BitsN.resize_replicate 2 (BigEndianCPU (),2))
             val word = BitsN.??(BitsN.bits(2,2) vAddr,BigEndianCPU ())
             val memdoubleword =
               LoadMemory
                 (CCA,
                  (BitsN.-(WORD,BitsN.@@(BitsN.B(0x0,1),byte)),
                   (pAddr,(vAddr,DATA))))
             val temp =
               case (word,byte) of
                  (BitsN.B(0x0,_),BitsN.B(0x0,_)) =>
                    BitsN.bits(31,0) memdoubleword
                | (BitsN.B(0x0,_),BitsN.B(0x1,_)) =>
                  BitsN.@@
                    (BitsN.bits(31,24) (GPR rt),
                     BitsN.bits(31,8) memdoubleword)
                | (BitsN.B(0x0,_),BitsN.B(0x2,_)) =>
                  BitsN.@@
                    (BitsN.bits(31,16) (GPR rt),
                     BitsN.bits(31,16) memdoubleword)
                | (BitsN.B(0x0,_),BitsN.B(0x3,_)) =>
                  BitsN.@@
                    (BitsN.bits(31,8) (GPR rt),
                     BitsN.bits(31,24) memdoubleword)
                | (BitsN.B(0x1,_),BitsN.B(0x0,_)) =>
                  BitsN.bits(63,32) memdoubleword
                | (BitsN.B(0x1,_),BitsN.B(0x1,_)) =>
                  BitsN.@@
                    (BitsN.bits(31,24) (GPR rt),
                     BitsN.bits(63,40) memdoubleword)
                | (BitsN.B(0x1,_),BitsN.B(0x2,_)) =>
                  BitsN.@@
                    (BitsN.bits(31,16) (GPR rt),
                     BitsN.bits(63,48) memdoubleword)
                | (BitsN.B(0x1,_),BitsN.B(0x3,_)) =>
                  BitsN.@@
                    (BitsN.bits(31,8) (GPR rt),
                     BitsN.bits(63,56) memdoubleword)
           in
             ( write'GPR(BitsN.signExtend 64 temp,rt); LLbit := NONE )
           end
    else ()
  end;

fun dfn'LDL (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
    val (pAddr,CCA) = AddressTranslation(vAddr,(DATA,LOAD))
  in
    if not (!exceptionSignalled)
      then let
             val pAddr =
               BitsN.@@
                 (BitsN.bits(Nat.-(PSIZE,1),3) pAddr,
                  BitsN.??
                    (BitsN.bits(2,0) pAddr,
                     BitsN.resize_replicate 3 (ReverseEndian (),3)))
             val pAddr =
               if BigEndianMem ()
                 then pAddr
               else BitsN.&&(pAddr,BitsN.~(BitsN.B(0x7,64)))
             val byte =
               BitsN.??
                 (BitsN.bits(2,0) vAddr,
                  BitsN.resize_replicate 3 (BigEndianCPU (),3))
             val memdoubleword =
               LoadMemory(CCA,(byte,(pAddr,(vAddr,DATA))))
           in
             ( write'GPR
                 (case byte of
                     BitsN.B(0x0,_) =>
                       BitsN.@@
                         (BitsN.bits(7,0) memdoubleword,
                          BitsN.bits(55,0) (GPR rt))
                   | BitsN.B(0x1,_) =>
                     BitsN.@@
                       (BitsN.bits(15,0) memdoubleword,
                        BitsN.bits(47,0) (GPR rt))
                   | BitsN.B(0x2,_) =>
                     BitsN.@@
                       (BitsN.bits(23,0) memdoubleword,
                        BitsN.bits(39,0) (GPR rt))
                   | BitsN.B(0x3,_) =>
                     BitsN.@@
                       (BitsN.bits(31,0) memdoubleword,
                        BitsN.bits(31,0) (GPR rt))
                   | BitsN.B(0x4,_) =>
                     BitsN.@@
                       (BitsN.bits(39,0) memdoubleword,
                        BitsN.bits(23,0) (GPR rt))
                   | BitsN.B(0x5,_) =>
                     BitsN.@@
                       (BitsN.bits(47,0) memdoubleword,
                        BitsN.bits(15,0) (GPR rt))
                   | BitsN.B(0x6,_) =>
                     BitsN.@@
                       (BitsN.bits(55,0) memdoubleword,
                        BitsN.bits(7,0) (GPR rt))
                   | BitsN.B(0x7,_) => BitsN.bits(63,0) memdoubleword
                   | _ => raise General.Bind,rt)
             ; LLbit := NONE
             )
           end
    else ()
  end;

fun dfn'LDR (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
    val (pAddr,CCA) = AddressTranslation(vAddr,(DATA,LOAD))
  in
    if not (!exceptionSignalled)
      then let
             val pAddr =
               BitsN.@@
                 (BitsN.bits(Nat.-(PSIZE,1),3) pAddr,
                  BitsN.??
                    (BitsN.bits(2,0) pAddr,
                     BitsN.resize_replicate 3 (ReverseEndian (),3)))
             val pAddr =
               if BigEndianMem ()
                 then pAddr
               else BitsN.&&(pAddr,BitsN.~(BitsN.B(0x7,64)))
             val byte =
               BitsN.??
                 (BitsN.bits(2,0) vAddr,
                  BitsN.resize_replicate 3 (BigEndianCPU (),3))
             val memdoubleword =
               LoadMemory
                 (CCA,(BitsN.-(DOUBLEWORD,byte),(pAddr,(vAddr,DATA))))
           in
             ( write'GPR
                 (case byte of
                     BitsN.B(0x0,_) => BitsN.bits(63,0) memdoubleword
                   | BitsN.B(0x1,_) =>
                     BitsN.@@
                       (BitsN.bits(63,56) (GPR rt),
                        BitsN.bits(63,8) memdoubleword)
                   | BitsN.B(0x2,_) =>
                     BitsN.@@
                       (BitsN.bits(63,48) (GPR rt),
                        BitsN.bits(63,16) memdoubleword)
                   | BitsN.B(0x3,_) =>
                     BitsN.@@
                       (BitsN.bits(63,40) (GPR rt),
                        BitsN.bits(63,24) memdoubleword)
                   | BitsN.B(0x4,_) =>
                     BitsN.@@
                       (BitsN.bits(63,32) (GPR rt),
                        BitsN.bits(63,32) memdoubleword)
                   | BitsN.B(0x5,_) =>
                     BitsN.@@
                       (BitsN.bits(63,24) (GPR rt),
                        BitsN.bits(63,40) memdoubleword)
                   | BitsN.B(0x6,_) =>
                     BitsN.@@
                       (BitsN.bits(63,16) (GPR rt),
                        BitsN.bits(63,48) memdoubleword)
                   | BitsN.B(0x7,_) =>
                     BitsN.@@
                       (BitsN.bits(63,8) (GPR rt),
                        BitsN.bits(63,56) memdoubleword)
                   | _ => raise General.Bind,rt)
             ; LLbit := NONE
             )
           end
    else ()
  end;

fun dfn'SB (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
    val (pAddr,CCA) = AddressTranslation(vAddr,(DATA,STORE))
  in
    if not (!exceptionSignalled)
      then let
             val pAddr =
               BitsN.@@
                 (BitsN.bits(Nat.-(PSIZE,1),3) pAddr,
                  BitsN.??
                    (BitsN.bits(2,0) pAddr,
                     BitsN.resize_replicate 3 (ReverseEndian (),3)))
             val bytesel =
               BitsN.??
                 (BitsN.bits(2,0) vAddr,
                  BitsN.resize_replicate 3 (BigEndianCPU (),3))
             val datadoubleword =
               BitsN.<<(GPR rt,Nat.*(8,BitsN.toNat bytesel))
           in
             ( StoreMemory
                 (CCA,(BYTE,(datadoubleword,(pAddr,(vAddr,DATA)))))
             ; LLbit := NONE
             )
           end
    else ()
  end;

fun dfn'SH (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
  in
    if BitsN.bit(vAddr,0)
      then ( CP0 := (CP0_BadVAddr_rupd((!CP0),vAddr))
           ; SignalException AdES
           )
    else let
           val (pAddr,CCA) = AddressTranslation(vAddr,(DATA,STORE))
         in
           if not (!exceptionSignalled)
             then let
                    val pAddr =
                      BitsN.@@
                        (BitsN.bits(Nat.-(PSIZE,1),3) pAddr,
                         BitsN.??
                           (BitsN.bits(2,0) pAddr,
                            BitsN.@@
                              (BitsN.resize_replicate 2
                                 (ReverseEndian (),2),BitsN.B(0x0,1))))
                    val bytesel =
                      BitsN.??
                        (BitsN.bits(2,0) vAddr,
                         BitsN.@@
                           (BitsN.resize_replicate 2 (BigEndianCPU (),2),
                            BitsN.B(0x0,1)))
                    val datadoubleword =
                      BitsN.<<(GPR rt,Nat.*(8,BitsN.toNat bytesel))
                  in
                    ( StoreMemory
                        (CCA,
                         (HALFWORD,(datadoubleword,(pAddr,(vAddr,DATA)))))
                    ; LLbit := NONE
                    )
                  end
           else ()
         end
  end;

fun storeWord (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
  in
    if not((BitsN.bits(1,0) vAddr) = (BitsN.B(0x0,2)))
      then ( CP0 := (CP0_BadVAddr_rupd((!CP0),vAddr))
           ; SignalException AdES
           )
    else let
           val (pAddr,CCA) = AddressTranslation(vAddr,(DATA,STORE))
         in
           if not (!exceptionSignalled)
             then let
                    val pAddr =
                      BitsN.@@
                        (BitsN.bits(Nat.-(PSIZE,1),3) pAddr,
                         BitsN.??
                           (BitsN.bits(2,0) pAddr,
                            BitsN.@@(ReverseEndian (),BitsN.B(0x0,2))))
                    val bytesel =
                      BitsN.??
                        (BitsN.bits(2,0) vAddr,
                         BitsN.@@(BigEndianCPU (),BitsN.B(0x0,2)))
                    val datadoubleword =
                      BitsN.<<(GPR rt,Nat.*(8,BitsN.toNat bytesel))
                  in
                    StoreMemory
                      (CCA,(WORD,(datadoubleword,(pAddr,(vAddr,DATA)))))
                  end
           else ()
         end
  end;

fun storeDoubleword (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
  in
    if not((BitsN.bits(2,0) vAddr) = (BitsN.B(0x0,3)))
      then ( CP0 := (CP0_BadVAddr_rupd((!CP0),vAddr))
           ; SignalException AdES
           )
    else let
           val (pAddr,CCA) = AddressTranslation(vAddr,(DATA,STORE))
         in
           if not (!exceptionSignalled)
             then let
                    val datadoubleword = GPR rt
                  in
                    StoreMemory
                      (CCA,
                       (DOUBLEWORD,(datadoubleword,(pAddr,(vAddr,DATA)))))
                  end
           else ()
         end
  end;

fun dfn'SW (base,(rt,offset)) =
  ( storeWord(base,(rt,offset)); LLbit := NONE );

fun dfn'SD (base,(rt,offset)) =
  ( storeDoubleword(base,(rt,offset)); LLbit := NONE );

fun dfn'SC (base,(rt,offset)) =
  case (!LLbit) of
     NONE => raise UNPREDICTABLE ("SC: LLbit not set")
   | Option.SOME false => write'GPR(BitsN.B(0x0,64),rt)
   | Option.SOME true =>
     ( storeWord(base,(rt,offset)); write'GPR(BitsN.B(0x1,64),rt) );

fun dfn'SCD (base,(rt,offset)) =
  case (!LLbit) of
     NONE => raise UNPREDICTABLE ("SCD: LLbit not set")
   | Option.SOME false => write'GPR(BitsN.B(0x0,64),rt)
   | Option.SOME true =>
     ( storeDoubleword(base,(rt,offset)); write'GPR(BitsN.B(0x1,64),rt) );

fun dfn'SWL (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
    val (pAddr,CCA) = AddressTranslation(vAddr,(DATA,STORE))
  in
    if not (!exceptionSignalled)
      then let
             val pAddr =
               BitsN.@@
                 (BitsN.bits(Nat.-(PSIZE,1),3) pAddr,
                  BitsN.??
                    (BitsN.bits(2,0) pAddr,
                     BitsN.resize_replicate 3 (ReverseEndian (),3)))
             val pAddr =
               if BigEndianMem ()
                 then pAddr
               else BitsN.&&(pAddr,BitsN.~(BitsN.B(0x3,64)))
             val byte =
               BitsN.??
                 (BitsN.bits(1,0) vAddr,
                  BitsN.resize_replicate 2 (BigEndianCPU (),2))
             val word = BitsN.??(BitsN.bits(2,2) vAddr,BigEndianCPU ())
             val datadoubleword =
               case byte of
                  BitsN.B(0x0,_) =>
                    BitsN.fromNat
                      (BitsN.toNat(BitsN.bits(31,24) (GPR rt)),64)
                | BitsN.B(0x1,_) =>
                  BitsN.fromNat
                    (BitsN.toNat(BitsN.bits(31,16) (GPR rt)),64)
                | BitsN.B(0x2,_) =>
                  BitsN.fromNat(BitsN.toNat(BitsN.bits(31,8) (GPR rt)),64)
                | BitsN.B(0x3,_) =>
                  BitsN.fromNat(BitsN.toNat(BitsN.bits(31,0) (GPR rt)),64)
                | _ => raise General.Bind
             val datadoubleword =
               if word = (BitsN.B(0x1,1))
                 then BitsN.<<(datadoubleword,32)
               else datadoubleword
           in
             StoreMemory
               (CCA,
                (BitsN.fromNat(BitsN.toNat byte,3),
                 (datadoubleword,(pAddr,(vAddr,DATA)))))
           end
    else ()
  end;

fun dfn'SWR (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
    val (pAddr,CCA) = AddressTranslation(vAddr,(DATA,STORE))
  in
    if not (!exceptionSignalled)
      then let
             val pAddr =
               BitsN.@@
                 (BitsN.bits(Nat.-(PSIZE,1),3) pAddr,
                  BitsN.??
                    (BitsN.bits(2,0) pAddr,
                     BitsN.resize_replicate 3 (ReverseEndian (),3)))
             val pAddr =
               if BigEndianMem ()
                 then BitsN.&&(pAddr,BitsN.~(BitsN.B(0x3,64)))
               else pAddr
             val byte =
               BitsN.??
                 (BitsN.bits(1,0) vAddr,
                  BitsN.resize_replicate 2 (BigEndianCPU (),2))
             val word = BitsN.??(BitsN.bits(2,2) vAddr,BigEndianCPU ())
             val datadoubleword =
               case (word,byte) of
                  (BitsN.B(0x0,_),BitsN.B(0x0,_)) =>
                    BitsN.fromNat
                      (BitsN.toNat(BitsN.bits(31,0) (GPR rt)),64)
                | (BitsN.B(0x0,_),BitsN.B(0x1,_)) =>
                  BitsN.<<
                    (BitsN.fromNat
                       (BitsN.toNat(BitsN.bits(23,0) (GPR rt)),64),8)
                | (BitsN.B(0x0,_),BitsN.B(0x2,_)) =>
                  BitsN.<<
                    (BitsN.fromNat
                       (BitsN.toNat(BitsN.bits(15,0) (GPR rt)),64),16)
                | (BitsN.B(0x0,_),BitsN.B(0x3,_)) =>
                  BitsN.<<
                    (BitsN.fromNat
                       (BitsN.toNat(BitsN.bits(7,0) (GPR rt)),64),24)
                | (BitsN.B(0x1,_),BitsN.B(0x0,_)) =>
                  BitsN.<<
                    (BitsN.fromNat
                       (BitsN.toNat(BitsN.bits(31,0) (GPR rt)),64),32)
                | (BitsN.B(0x1,_),BitsN.B(0x1,_)) =>
                  BitsN.<<
                    (BitsN.fromNat
                       (BitsN.toNat(BitsN.bits(23,0) (GPR rt)),64),40)
                | (BitsN.B(0x1,_),BitsN.B(0x2,_)) =>
                  BitsN.<<
                    (BitsN.fromNat
                       (BitsN.toNat(BitsN.bits(15,0) (GPR rt)),64),48)
                | (BitsN.B(0x1,_),BitsN.B(0x3,_)) =>
                  BitsN.<<
                    (BitsN.fromNat
                       (BitsN.toNat(BitsN.bits(7,0) (GPR rt)),64),56)
           in
             StoreMemory
               (CCA,
                (BitsN.-(WORD,BitsN.fromNat(BitsN.toNat byte,3)),
                 (datadoubleword,(pAddr,(vAddr,DATA)))))
           end
    else ()
  end;

fun dfn'SDL (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
    val (pAddr,CCA) = AddressTranslation(vAddr,(DATA,STORE))
  in
    if not (!exceptionSignalled)
      then let
             val pAddr =
               BitsN.@@
                 (BitsN.bits(Nat.-(PSIZE,1),3) pAddr,
                  BitsN.??
                    (BitsN.bits(2,0) pAddr,
                     BitsN.resize_replicate 3 (ReverseEndian (),3)))
             val pAddr =
               if BigEndianMem ()
                 then pAddr
               else BitsN.&&(pAddr,BitsN.~(BitsN.B(0x7,64)))
             val byte =
               BitsN.??
                 (BitsN.bits(2,0) vAddr,
                  BitsN.resize_replicate 3 (BigEndianCPU (),3))
             val datadoubleword =
               case byte of
                  BitsN.B(0x0,_) =>
                    BitsN.fromNat
                      (BitsN.toNat(BitsN.bits(63,56) (GPR rt)),64)
                | BitsN.B(0x1,_) =>
                  BitsN.fromNat
                    (BitsN.toNat(BitsN.bits(63,48) (GPR rt)),64)
                | BitsN.B(0x2,_) =>
                  BitsN.fromNat
                    (BitsN.toNat(BitsN.bits(63,40) (GPR rt)),64)
                | BitsN.B(0x3,_) =>
                  BitsN.fromNat
                    (BitsN.toNat(BitsN.bits(63,32) (GPR rt)),64)
                | BitsN.B(0x4,_) =>
                  BitsN.fromNat
                    (BitsN.toNat(BitsN.bits(63,24) (GPR rt)),64)
                | BitsN.B(0x5,_) =>
                  BitsN.fromNat
                    (BitsN.toNat(BitsN.bits(63,16) (GPR rt)),64)
                | BitsN.B(0x6,_) =>
                  BitsN.fromNat(BitsN.toNat(BitsN.bits(63,8) (GPR rt)),64)
                | BitsN.B(0x7,_) => GPR rt
                | _ => raise General.Bind
           in
             StoreMemory(CCA,(byte,(datadoubleword,(pAddr,(vAddr,DATA)))))
           end
    else ()
  end;

fun dfn'SDR (base,(rt,offset)) =
  let
    val vAddr = BitsN.+(BitsN.signExtend 64 offset,GPR base)
    val (pAddr,CCA) = AddressTranslation(vAddr,(DATA,STORE))
  in
    if not (!exceptionSignalled)
      then let
             val pAddr =
               BitsN.@@
                 (BitsN.bits(Nat.-(PSIZE,1),3) pAddr,
                  BitsN.??
                    (BitsN.bits(2,0) pAddr,
                     BitsN.resize_replicate 3 (ReverseEndian (),3)))
             val pAddr =
               if BigEndianMem ()
                 then BitsN.&&(pAddr,BitsN.~(BitsN.B(0x7,64)))
               else pAddr
             val byte =
               BitsN.??
                 (BitsN.bits(2,0) vAddr,
                  BitsN.resize_replicate 3 (BigEndianCPU (),3))
             val datadoubleword =
               case byte of
                  BitsN.B(0x0,_) => GPR rt
                | BitsN.B(0x1,_) =>
                  BitsN.<<
                    (BitsN.fromNat
                       (BitsN.toNat(BitsN.bits(55,0) (GPR rt)),64),8)
                | BitsN.B(0x2,_) =>
                  BitsN.<<
                    (BitsN.fromNat
                       (BitsN.toNat(BitsN.bits(47,0) (GPR rt)),64),16)
                | BitsN.B(0x3,_) =>
                  BitsN.<<
                    (BitsN.fromNat
                       (BitsN.toNat(BitsN.bits(39,0) (GPR rt)),64),24)
                | BitsN.B(0x4,_) =>
                  BitsN.<<
                    (BitsN.fromNat
                       (BitsN.toNat(BitsN.bits(31,0) (GPR rt)),64),32)
                | BitsN.B(0x5,_) =>
                  BitsN.<<
                    (BitsN.fromNat
                       (BitsN.toNat(BitsN.bits(23,0) (GPR rt)),64),40)
                | BitsN.B(0x6,_) =>
                  BitsN.<<
                    (BitsN.fromNat
                       (BitsN.toNat(BitsN.bits(15,0) (GPR rt)),64),48)
                | BitsN.B(0x7,_) =>
                  BitsN.<<
                    (BitsN.fromNat
                       (BitsN.toNat(BitsN.bits(7,0) (GPR rt)),64),56)
                | _ => raise General.Bind
           in
             StoreMemory
               (CCA,
                (BitsN.-(DOUBLEWORD,byte),
                 (datadoubleword,(pAddr,(vAddr,DATA)))))
           end
    else ()
  end;

fun dfn'SYNC stype = ();

fun dfn'BREAK () = SignalException Bp;

fun dfn'SYSCALL () = SignalException Sys;

fun dfn'ERET () =
  if Option.isSome (!BranchDelay)
    then raise UNPREDICTABLE ("ERET follows branch")
  else if (#CU0((#Status((!CP0) : CP0)) : StatusRegister)) orelse
     (KernelMode ())
    then ( if #ERL((#Status((!CP0) : CP0)) : StatusRegister)
             then ( PC :=
                    (BitsN.-(#ErrorEPC((!CP0) : CP0),BitsN.B(0x4,64)))
                  ; let
                      val x0 = #Status((!CP0) : CP0)
                    in
                      CP0 :=
                      (CP0_Status_rupd
                         ((!CP0),StatusRegister_ERL_rupd(x0,false)))
                    end
                  )
           else ( PC := (BitsN.-(#EPC((!CP0) : CP0),BitsN.B(0x4,64)))
                ; let
                    val x0 = #Status((!CP0) : CP0)
                  in
                    CP0 :=
                    (CP0_Status_rupd
                       ((!CP0),StatusRegister_EXL_rupd(x0,false)))
                  end
                )
         ; LLbit := (Option.SOME false)
         )
  else SignalException CpU;

fun dfn'MTC0 (rt,(rd,sel)) =
  if (#CU0((#Status((!CP0) : CP0)) : StatusRegister)) orelse
     (KernelMode ())
    then let val x = (0,(rd,sel)) in write'CPR(GPR rt,x) end
  else SignalException CpU;

fun dfn'DMTC0 (rt,(rd,sel)) =
  if (#CU0((#Status((!CP0) : CP0)) : StatusRegister)) orelse
     (KernelMode ())
    then let val x = (0,(rd,sel)) in write'CPR(GPR rt,x) end
  else SignalException CpU;

fun dfn'MFC0 (rt,(rd,sel)) =
  if (#CU0((#Status((!CP0) : CP0)) : StatusRegister)) orelse
     (KernelMode ())
    then write'GPR
           (BitsN.signExtend 64 (BitsN.bits(31,0) (CPR(0,(rd,sel)))),rt)
  else SignalException CpU;

fun dfn'DMFC0 (rt,(rd,sel)) =
  if (#CU0((#Status((!CP0) : CP0)) : StatusRegister)) orelse
     (KernelMode ())
    then write'GPR(CPR(0,(rd,sel)),rt)
  else SignalException CpU;

fun dfn'J instr_index =
  BranchTo :=
  (Option.SOME
     (false,
      BitsN.concat[BitsN.bits(63,28) (!PC),instr_index,BitsN.B(0x0,2)]));

fun dfn'JAL instr_index =
  ( write'GPR(BitsN.+((!PC),BitsN.B(0x8,64)),BitsN.B(0x1F,5))
  ; BranchTo :=
    (Option.SOME
       (false,
        BitsN.concat[BitsN.bits(63,28) (!PC),instr_index,BitsN.B(0x0,2)]))
  );

fun dfn'JR rs = BranchTo := (Option.SOME(false,GPR rs));

fun dfn'JALR (rs,rd) =
  let
    val temp = GPR rs
  in
    ( write'GPR(BitsN.+((!PC),BitsN.B(0x8,64)),rd)
    ; BranchTo := (Option.SOME(false,temp))
    )
  end;

fun ConditionalBranch (b,offset) =
  BranchTo :=
  (Option.SOME
     (if b
        then (false,
              BitsN.+
                (BitsN.+((!PC),BitsN.B(0x4,64)),
                 BitsN.<<(BitsN.signExtend 64 offset,2)))
      else (true,BitsN.+((!PC),BitsN.B(0x4,64)))));

fun ConditionalBranchLikely (b,offset) =
  if b
    then BranchTo :=
         (Option.SOME
            (false,
             BitsN.+
               (BitsN.+((!PC),BitsN.B(0x4,64)),
                BitsN.<<(BitsN.signExtend 64 offset,2))))
  else if Option.isSome (!BranchDelay)
    then BranchTo := (Option.SOME(true,BitsN.+((!PC),BitsN.B(0x8,64))))
  else PC := (BitsN.+((!PC),BitsN.B(0x4,64)));

fun dfn'BEQ (rs,(rt,offset)) =
  ConditionalBranch((GPR rs) = (GPR rt),offset);

fun dfn'BNE (rs,(rt,offset)) =
  ConditionalBranch(not((GPR rs) = (GPR rt)),offset);

fun dfn'BLEZ (rs,offset) =
  ConditionalBranch(BitsN.<=(GPR rs,BitsN.B(0x0,64)),offset);

fun dfn'BGTZ (rs,offset) =
  ConditionalBranch(BitsN.>(GPR rs,BitsN.B(0x0,64)),offset);

fun dfn'BLTZ (rs,offset) =
  ConditionalBranch(BitsN.<(GPR rs,BitsN.B(0x0,64)),offset);

fun dfn'BGEZ (rs,offset) =
  ConditionalBranch(BitsN.>=(GPR rs,BitsN.B(0x0,64)),offset);

fun dfn'BLTZAL (rs,offset) =
  let
    val temp = GPR rs
  in
    ( write'GPR(BitsN.+((!PC),BitsN.B(0x8,64)),BitsN.B(0x1F,5))
    ; ConditionalBranch(BitsN.<(temp,BitsN.B(0x0,64)),offset)
    )
  end;

fun dfn'BGEZAL (rs,offset) =
  let
    val temp = GPR rs
  in
    ( write'GPR(BitsN.+((!PC),BitsN.B(0x8,64)),BitsN.B(0x1F,5))
    ; ConditionalBranch(BitsN.>=(temp,BitsN.B(0x0,64)),offset)
    )
  end;

fun dfn'BEQL (rs,(rt,offset)) =
  ConditionalBranchLikely((GPR rs) = (GPR rt),offset);

fun dfn'BNEL (rs,(rt,offset)) =
  ConditionalBranchLikely(not((GPR rs) = (GPR rt)),offset);

fun dfn'BLEZL (rs,offset) =
  ConditionalBranchLikely(BitsN.<=(GPR rs,BitsN.B(0x0,64)),offset);

fun dfn'BGTZL (rs,offset) =
  ConditionalBranchLikely(BitsN.>(GPR rs,BitsN.B(0x0,64)),offset);

fun dfn'BLTZL (rs,offset) =
  ConditionalBranchLikely(BitsN.<(GPR rs,BitsN.B(0x0,64)),offset);

fun dfn'BGEZL (rs,offset) =
  ConditionalBranchLikely(BitsN.>=(GPR rs,BitsN.B(0x0,64)),offset);

fun dfn'BLTZALL (rs,offset) =
  let
    val temp = GPR rs
  in
    ( write'GPR(BitsN.+((!PC),BitsN.B(0x8,64)),BitsN.B(0x1F,5))
    ; ConditionalBranchLikely(BitsN.<(temp,BitsN.B(0x0,64)),offset)
    )
  end;

fun dfn'BGEZALL (rs,offset) =
  let
    val temp = GPR rs
  in
    ( write'GPR(BitsN.+((!PC),BitsN.B(0x8,64)),BitsN.B(0x1F,5))
    ; ConditionalBranchLikely(BitsN.>=(temp,BitsN.B(0x0,64)),offset)
    )
  end;

val dfn'WAIT = ()

fun dfn'TLBP () = SignalException ResI;

fun dfn'TLBR () = SignalException ResI;

fun dfn'TLBWI () = SignalException ResI;

fun dfn'TLBWR () = SignalException ResI;

fun dfn'CACHE (base,(opn,offset)) = SignalException ResI;

fun dfn'RDHWR (rt,rd) = SignalException ResI;

fun dfn'ReservedInstruction () = SignalException ResI;

fun dfn'Unpredictable () =
  raise UNPREDICTABLE ("Unpredictable instruction");

fun Run v0 =
  case v0 of
     BREAK => dfn'BREAK ()
   | ERET => dfn'ERET ()
   | ReservedInstruction => dfn'ReservedInstruction ()
   | SYSCALL => dfn'SYSCALL ()
   | TLBP => dfn'TLBP ()
   | TLBR => dfn'TLBR ()
   | TLBWI => dfn'TLBWI ()
   | TLBWR => dfn'TLBWR ()
   | Unpredictable => dfn'Unpredictable ()
   | WAIT => dfn'WAIT
   | CACHE v127 => dfn'CACHE v127
   | RDHWR v128 => dfn'RDHWR v128
   | SYNC v129 => dfn'SYNC v129
   | ArithI v1 =>
     (case v1 of
         ADDI v2 => dfn'ADDI v2
       | ADDIU v3 => dfn'ADDIU v3
       | ANDI v4 => dfn'ANDI v4
       | DADDI v5 => dfn'DADDI v5
       | DADDIU v6 => dfn'DADDIU v6
       | LUI v7 => dfn'LUI v7
       | ORI v8 => dfn'ORI v8
       | SLTI v9 => dfn'SLTI v9
       | SLTIU v10 => dfn'SLTIU v10
       | XORI v11 => dfn'XORI v11)
   | ArithR v12 =>
     (case v12 of
         ADD v13 => dfn'ADD v13
       | ADDU v14 => dfn'ADDU v14
       | AND v15 => dfn'AND v15
       | DADD v16 => dfn'DADD v16
       | DADDU v17 => dfn'DADDU v17
       | DSUB v18 => dfn'DSUB v18
       | DSUBU v19 => dfn'DSUBU v19
       | MOVN v20 => dfn'MOVN v20
       | MOVZ v21 => dfn'MOVZ v21
       | NOR v22 => dfn'NOR v22
       | OR v23 => dfn'OR v23
       | SLT v24 => dfn'SLT v24
       | SLTU v25 => dfn'SLTU v25
       | SUB v26 => dfn'SUB v26
       | SUBU v27 => dfn'SUBU v27
       | XOR v28 => dfn'XOR v28)
   | Branch v29 =>
     (case v29 of
         BEQ v30 => dfn'BEQ v30
       | BEQL v31 => dfn'BEQL v31
       | BGEZ v32 => dfn'BGEZ v32
       | BGEZAL v33 => dfn'BGEZAL v33
       | BGEZALL v34 => dfn'BGEZALL v34
       | BGEZL v35 => dfn'BGEZL v35
       | BGTZ v36 => dfn'BGTZ v36
       | BGTZL v37 => dfn'BGTZL v37
       | BLEZ v38 => dfn'BLEZ v38
       | BLEZL v39 => dfn'BLEZL v39
       | BLTZ v40 => dfn'BLTZ v40
       | BLTZAL v41 => dfn'BLTZAL v41
       | BLTZALL v42 => dfn'BLTZALL v42
       | BLTZL v43 => dfn'BLTZL v43
       | BNE v44 => dfn'BNE v44
       | BNEL v45 => dfn'BNEL v45
       | J v46 => dfn'J v46
       | JAL v47 => dfn'JAL v47
       | JALR v48 => dfn'JALR v48
       | JR v49 => dfn'JR v49)
   | CP v50 =>
     (case v50 of
         DMFC0 v51 => dfn'DMFC0 v51
       | DMTC0 v52 => dfn'DMTC0 v52
       | MFC0 v53 => dfn'MFC0 v53
       | MTC0 v54 => dfn'MTC0 v54)
   | Load v55 =>
     (case v55 of
         LB v56 => dfn'LB v56
       | LBU v57 => dfn'LBU v57
       | LD v58 => dfn'LD v58
       | LDL v59 => dfn'LDL v59
       | LDR v60 => dfn'LDR v60
       | LH v61 => dfn'LH v61
       | LHU v62 => dfn'LHU v62
       | LL v63 => dfn'LL v63
       | LLD v64 => dfn'LLD v64
       | LW v65 => dfn'LW v65
       | LWL v66 => dfn'LWL v66
       | LWR v67 => dfn'LWR v67
       | LWU v68 => dfn'LWU v68)
   | MultDiv v69 =>
     (case v69 of
         DDIV v70 => dfn'DDIV v70
       | DDIVU v71 => dfn'DDIVU v71
       | DIV v72 => dfn'DIV v72
       | DIVU v73 => dfn'DIVU v73
       | DMULT v74 => dfn'DMULT v74
       | DMULTU v75 => dfn'DMULTU v75
       | MADD v76 => dfn'MADD v76
       | MADDU v77 => dfn'MADDU v77
       | MFHI v78 => dfn'MFHI v78
       | MFLO v79 => dfn'MFLO v79
       | MSUB v80 => dfn'MSUB v80
       | MSUBU v81 => dfn'MSUBU v81
       | MTHI v82 => dfn'MTHI v82
       | MTLO v83 => dfn'MTLO v83
       | MUL v84 => dfn'MUL v84
       | MULT v85 => dfn'MULT v85
       | MULTU v86 => dfn'MULTU v86)
   | Shift v87 =>
     (case v87 of
         DSLL v88 => dfn'DSLL v88
       | DSLL32 v89 => dfn'DSLL32 v89
       | DSLLV v90 => dfn'DSLLV v90
       | DSRA v91 => dfn'DSRA v91
       | DSRA32 v92 => dfn'DSRA32 v92
       | DSRAV v93 => dfn'DSRAV v93
       | DSRL v94 => dfn'DSRL v94
       | DSRL32 v95 => dfn'DSRL32 v95
       | DSRLV v96 => dfn'DSRLV v96
       | SLL v97 => dfn'SLL v97
       | SLLV v98 => dfn'SLLV v98
       | SRA v99 => dfn'SRA v99
       | SRAV v100 => dfn'SRAV v100
       | SRL v101 => dfn'SRL v101
       | SRLV v102 => dfn'SRLV v102)
   | Store v103 =>
     (case v103 of
         SB v104 => dfn'SB v104
       | SC v105 => dfn'SC v105
       | SCD v106 => dfn'SCD v106
       | SD v107 => dfn'SD v107
       | SDL v108 => dfn'SDL v108
       | SDR v109 => dfn'SDR v109
       | SH v110 => dfn'SH v110
       | SW v111 => dfn'SW v111
       | SWL v112 => dfn'SWL v112
       | SWR v113 => dfn'SWR v113)
   | Trap v114 =>
     (case v114 of
         TEQ v115 => dfn'TEQ v115
       | TEQI v116 => dfn'TEQI v116
       | TGE v117 => dfn'TGE v117
       | TGEI v118 => dfn'TGEI v118
       | TGEIU v119 => dfn'TGEIU v119
       | TGEU v120 => dfn'TGEU v120
       | TLT v121 => dfn'TLT v121
       | TLTI v122 => dfn'TLTI v122
       | TLTIU v123 => dfn'TLTIU v123
       | TLTU v124 => dfn'TLTU v124
       | TNE v125 => dfn'TNE v125
       | TNEI v126 => dfn'TNEI v126);

fun Decode w =
  case boolify'32 w of
     (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (rt'4,
                 (rt'3,
                  (rt'2,
                   (rt'1,
                    (rt'0,
                     (rd'4,
                      (rd'3,
                       (rd'2,
                        (rd'1,
                         (rd'0,
                          (imm5'4,
                           (imm5'3,
                            (imm5'2,
                             (imm5'1,
                              (imm5'0,
                               (false,
                                (false,(false,(false,(false,false))))))))))))))))))))))))))))))) =>
       Shift
         (SLL(BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
              (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
               BitsN.fromBitstring([imm5'4,imm5'3,imm5'2,imm5'1,imm5'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (imm5'4,
                         (imm5'3,
                          (imm5'2,
                           (imm5'1,
                            (imm5'0,
                             (false,(false,(false,(false,(true,false))))))))))))))))))))))))))))))) =>
     Shift
       (SRL(BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
             BitsN.fromBitstring([imm5'4,imm5'3,imm5'2,imm5'1,imm5'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (imm5'4,
                         (imm5'3,
                          (imm5'2,
                           (imm5'1,
                            (imm5'0,
                             (false,(false,(false,(false,(true,true))))))))))))))))))))))))))))))) =>
     Shift
       (SRA(BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
             BitsN.fromBitstring([imm5'4,imm5'3,imm5'2,imm5'1,imm5'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(false,(false,(true,(false,false))))))))))))))))))))))))))))))) =>
     Shift
       (SLLV
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(false,(false,(true,(true,false))))))))))))))))))))))))))))))) =>
     Shift
       (SRLV
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(false,(false,(true,(true,true))))))))))))))))))))))))))))))) =>
     Shift
       (SRAV
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (hint'4,
                         (hint'3,
                          (hint'2,
                           (hint'1,
                            (hint'0,
                             (false,(false,(true,(false,(false,false))))))))))))))))))))))))))))))) =>
     Branch(JR(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (hint'4,
                         (hint'3,
                          (hint'2,
                           (hint'1,
                            (hint'0,
                             (false,(false,(true,(false,(false,true))))))))))))))))))))))))))))))) =>
     Branch
       (JALR
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(false,(true,(false,(true,false))))))))))))))))))))))))))))))) =>
     ArithR
       (MOVZ
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(false,(true,(false,(true,true))))))))))))))))))))))))))))))) =>
     ArithR
       (MOVN
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (code'14,
               (code'13,
                (code'12,
                 (code'11,
                  (code'10,
                   (code'9,
                    (code'8,
                     (code'7,
                      (code'6,
                       (code'5,
                        (code'4,
                         (code'3,
                          (code'2,
                           (code'1,
                            (code'0,
                             (false,(false,(true,(true,(false,false))))))))))))))))))))))))))))))) =>
     SYSCALL
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (code'14,
               (code'13,
                (code'12,
                 (code'11,
                  (code'10,
                   (code'9,
                    (code'8,
                     (code'7,
                      (code'6,
                       (code'5,
                        (code'4,
                         (code'3,
                          (code'2,
                           (code'1,
                            (code'0,
                             (false,(false,(true,(true,(false,true))))))))))))))))))))))))))))))) =>
     BREAK
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (imm5'4,
                         (imm5'3,
                          (imm5'2,
                           (imm5'1,
                            (imm5'0,
                             (false,(false,(true,(true,(true,true))))))))))))))))))))))))))))))) =>
     SYNC(BitsN.fromBitstring([imm5'4,imm5'3,imm5'2,imm5'1,imm5'0],5))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(true,(false,(false,(false,false))))))))))))))))))))))))))))))) =>
     MultDiv(MFHI(BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(true,(false,(false,(false,true))))))))))))))))))))))))))))))) =>
     MultDiv(MTHI(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(true,(false,(false,(true,false))))))))))))))))))))))))))))))) =>
     MultDiv(MFLO(BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(true,(false,(false,(true,true))))))))))))))))))))))))))))))) =>
     MultDiv(MTLO(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(true,(false,(true,(false,false))))))))))))))))))))))))))))))) =>
     Shift
       (DSLLV
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(true,(false,(true,(true,false))))))))))))))))))))))))))))))) =>
     Shift
       (DSRLV
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(true,(false,(true,(true,true))))))))))))))))))))))))))))))) =>
     Shift
       (DSRAV
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(true,(true,(false,(false,false))))))))))))))))))))))))))))))) =>
     MultDiv
       (MULT
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(true,(true,(false,(false,true))))))))))))))))))))))))))))))) =>
     MultDiv
       (MULTU
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(true,(true,(false,(true,false))))))))))))))))))))))))))))))) =>
     MultDiv
       (DIV(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(true,(true,(false,(true,true))))))))))))))))))))))))))))))) =>
     MultDiv
       (DIVU
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(true,(true,(true,(false,false))))))))))))))))))))))))))))))) =>
     MultDiv
       (DMULT
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(true,(true,(true,(false,true))))))))))))))))))))))))))))))) =>
     MultDiv
       (DMULTU
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(true,(true,(true,(true,false))))))))))))))))))))))))))))))) =>
     MultDiv
       (DDIV
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(true,(true,(true,(true,true))))))))))))))))))))))))))))))) =>
     MultDiv
       (DDIVU
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (true,(false,(false,(false,(false,false))))))))))))))))))))))))))))))) =>
     ArithR
       (ADD(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (true,(false,(false,(false,(false,true))))))))))))))))))))))))))))))) =>
     ArithR
       (ADDU
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (true,(false,(false,(false,(true,false))))))))))))))))))))))))))))))) =>
     ArithR
       (SUB(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (true,(false,(false,(false,(true,true))))))))))))))))))))))))))))))) =>
     ArithR
       (SUBU
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (true,(false,(false,(true,(false,false))))))))))))))))))))))))))))))) =>
     ArithR
       (AND(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (true,(false,(false,(true,(false,true))))))))))))))))))))))))))))))) =>
     ArithR
       (OR(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (true,(false,(false,(true,(true,false))))))))))))))))))))))))))))))) =>
     ArithR
       (XOR(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (true,(false,(false,(true,(true,true))))))))))))))))))))))))))))))) =>
     ArithR
       (NOR(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (true,(false,(true,(false,(true,false))))))))))))))))))))))))))))))) =>
     ArithR
       (SLT(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (true,(false,(true,(false,(true,true))))))))))))))))))))))))))))))) =>
     ArithR
       (SLTU
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (true,(false,(true,(true,(false,false))))))))))))))))))))))))))))))) =>
     ArithR
       (DADD
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (true,(false,(true,(true,(false,true))))))))))))))))))))))))))))))) =>
     ArithR
       (DADDU
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (true,(false,(true,(true,(true,false))))))))))))))))))))))))))))))) =>
     ArithR
       (DSUB
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (true,(false,(true,(true,(true,true))))))))))))))))))))))))))))))) =>
     ArithR
       (DSUBU
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (code'9,
                    (code'8,
                     (code'7,
                      (code'6,
                       (code'5,
                        (code'4,
                         (code'3,
                          (code'2,
                           (code'1,
                            (code'0,
                             (true,(true,(false,(false,(false,false))))))))))))))))))))))))))))))) =>
     Trap
       (TGE(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (code'9,
                    (code'8,
                     (code'7,
                      (code'6,
                       (code'5,
                        (code'4,
                         (code'3,
                          (code'2,
                           (code'1,
                            (code'0,
                             (true,(true,(false,(false,(false,true))))))))))))))))))))))))))))))) =>
     Trap
       (TGEU
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (code'9,
                    (code'8,
                     (code'7,
                      (code'6,
                       (code'5,
                        (code'4,
                         (code'3,
                          (code'2,
                           (code'1,
                            (code'0,
                             (true,(true,(false,(false,(true,false))))))))))))))))))))))))))))))) =>
     Trap
       (TLT(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (code'9,
                    (code'8,
                     (code'7,
                      (code'6,
                       (code'5,
                        (code'4,
                         (code'3,
                          (code'2,
                           (code'1,
                            (code'0,
                             (true,(true,(false,(false,(true,true))))))))))))))))))))))))))))))) =>
     Trap
       (TLTU
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (code'9,
                    (code'8,
                     (code'7,
                      (code'6,
                       (code'5,
                        (code'4,
                         (code'3,
                          (code'2,
                           (code'1,
                            (code'0,
                             (true,(true,(false,(true,(false,false))))))))))))))))))))))))))))))) =>
     Trap
       (TEQ(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (code'9,
                    (code'8,
                     (code'7,
                      (code'6,
                       (code'5,
                        (code'4,
                         (code'3,
                          (code'2,
                           (code'1,
                            (code'0,
                             (true,(true,(false,(true,(true,false))))))))))))))))))))))))))))))) =>
     Trap
       (TNE(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (imm5'4,
                         (imm5'3,
                          (imm5'2,
                           (imm5'1,
                            (imm5'0,
                             (true,(true,(true,(false,(false,false))))))))))))))))))))))))))))))) =>
     Shift
       (DSLL
          (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
           (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
            BitsN.fromBitstring([imm5'4,imm5'3,imm5'2,imm5'1,imm5'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (imm5'4,
                         (imm5'3,
                          (imm5'2,
                           (imm5'1,
                            (imm5'0,
                             (true,(true,(true,(false,(true,false))))))))))))))))))))))))))))))) =>
     Shift
       (DSRL
          (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
           (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
            BitsN.fromBitstring([imm5'4,imm5'3,imm5'2,imm5'1,imm5'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (imm5'4,
                         (imm5'3,
                          (imm5'2,
                           (imm5'1,
                            (imm5'0,
                             (true,(true,(true,(false,(true,true))))))))))))))))))))))))))))))) =>
     Shift
       (DSRA
          (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
           (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
            BitsN.fromBitstring([imm5'4,imm5'3,imm5'2,imm5'1,imm5'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (imm5'4,
                         (imm5'3,
                          (imm5'2,
                           (imm5'1,
                            (imm5'0,
                             (true,(true,(true,(true,(false,false))))))))))))))))))))))))))))))) =>
     Shift
       (DSLL32
          (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
           (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
            BitsN.fromBitstring([imm5'4,imm5'3,imm5'2,imm5'1,imm5'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (imm5'4,
                         (imm5'3,
                          (imm5'2,
                           (imm5'1,
                            (imm5'0,
                             (true,(true,(true,(true,(true,false))))))))))))))))))))))))))))))) =>
     Shift
       (DSRL32
          (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
           (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
            BitsN.fromBitstring([imm5'4,imm5'3,imm5'2,imm5'1,imm5'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (imm5'4,
                         (imm5'3,
                          (imm5'2,
                           (imm5'1,
                            (imm5'0,
                             (true,(true,(true,(true,(true,true))))))))))))))))))))))))))))))) =>
     Shift
       (DSRA32
          (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
           (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
            BitsN.fromBitstring([imm5'4,imm5'3,imm5'2,imm5'1,imm5'0],5))))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Branch
       (BLTZ
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring
             ([immediate'15,immediate'14,immediate'13,immediate'12,
               immediate'11,immediate'10,immediate'9,immediate'8,
               immediate'7,immediate'6,immediate'5,immediate'4,
               immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (false,
               (false,
                (false,
                 (false,
                  (true,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Branch
       (BGEZ
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring
             ([immediate'15,immediate'14,immediate'13,immediate'12,
               immediate'11,immediate'10,immediate'9,immediate'8,
               immediate'7,immediate'6,immediate'5,immediate'4,
               immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (false,
               (false,
                (false,
                 (true,
                  (false,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Branch
       (BLTZL
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring
             ([immediate'15,immediate'14,immediate'13,immediate'12,
               immediate'11,immediate'10,immediate'9,immediate'8,
               immediate'7,immediate'6,immediate'5,immediate'4,
               immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (false,
               (false,
                (false,
                 (true,
                  (true,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Branch
       (BGEZL
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring
             ([immediate'15,immediate'14,immediate'13,immediate'12,
               immediate'11,immediate'10,immediate'9,immediate'8,
               immediate'7,immediate'6,immediate'5,immediate'4,
               immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (false,
               (true,
                (false,
                 (false,
                  (false,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Trap
       (TGEI
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring
             ([immediate'15,immediate'14,immediate'13,immediate'12,
               immediate'11,immediate'10,immediate'9,immediate'8,
               immediate'7,immediate'6,immediate'5,immediate'4,
               immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (false,
               (true,
                (false,
                 (false,
                  (true,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Trap
       (TGEIU
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring
             ([immediate'15,immediate'14,immediate'13,immediate'12,
               immediate'11,immediate'10,immediate'9,immediate'8,
               immediate'7,immediate'6,immediate'5,immediate'4,
               immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (false,
               (true,
                (false,
                 (true,
                  (false,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Trap
       (TLTI
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring
             ([immediate'15,immediate'14,immediate'13,immediate'12,
               immediate'11,immediate'10,immediate'9,immediate'8,
               immediate'7,immediate'6,immediate'5,immediate'4,
               immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (false,
               (true,
                (false,
                 (true,
                  (true,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Trap
       (TLTIU
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring
             ([immediate'15,immediate'14,immediate'13,immediate'12,
               immediate'11,immediate'10,immediate'9,immediate'8,
               immediate'7,immediate'6,immediate'5,immediate'4,
               immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (false,
               (true,
                (true,
                 (false,
                  (false,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Trap
       (TEQI
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring
             ([immediate'15,immediate'14,immediate'13,immediate'12,
               immediate'11,immediate'10,immediate'9,immediate'8,
               immediate'7,immediate'6,immediate'5,immediate'4,
               immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (false,
               (true,
                (true,
                 (true,
                  (false,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Trap
       (TNEI
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring
             ([immediate'15,immediate'14,immediate'13,immediate'12,
               immediate'11,immediate'10,immediate'9,immediate'8,
               immediate'7,immediate'6,immediate'5,immediate'4,
               immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (true,
         (true,
          (true,
           (true,
            (true,
             (true,
              (true,
               (false,
                (false,
                 (_,
                  (_,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Unpredictable
   | (false,
    (false,
     (false,
      (false,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (true,
               (false,
                (false,
                 (false,
                  (false,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Branch
       (BLTZAL
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring
             ([immediate'15,immediate'14,immediate'13,immediate'12,
               immediate'11,immediate'10,immediate'9,immediate'8,
               immediate'7,immediate'6,immediate'5,immediate'4,
               immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (true,
               (false,
                (false,
                 (false,
                  (true,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Branch
       (BGEZAL
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring
             ([immediate'15,immediate'14,immediate'13,immediate'12,
               immediate'11,immediate'10,immediate'9,immediate'8,
               immediate'7,immediate'6,immediate'5,immediate'4,
               immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (true,
               (false,
                (false,
                 (true,
                  (false,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Branch
       (BLTZALL
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring
             ([immediate'15,immediate'14,immediate'13,immediate'12,
               immediate'11,immediate'10,immediate'9,immediate'8,
               immediate'7,immediate'6,immediate'5,immediate'4,
               immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
    (false,
     (false,
      (false,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (true,
               (false,
                (false,
                 (true,
                  (true,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Branch
       (BGEZALL
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring
             ([immediate'15,immediate'14,immediate'13,immediate'12,
               immediate'11,immediate'10,immediate'9,immediate'8,
               immediate'7,immediate'6,immediate'5,immediate'4,
               immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
    (false,
     (false,
      (false,
       (true,
        (false,
         (immediate'25,
          (immediate'24,
           (immediate'23,
            (immediate'22,
             (immediate'21,
              (immediate'20,
               (immediate'19,
                (immediate'18,
                 (immediate'17,
                  (immediate'16,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Branch
       (J(BitsN.fromBitstring
            ([immediate'25,immediate'24,immediate'23,immediate'22,
              immediate'21,immediate'20,immediate'19,immediate'18,
              immediate'17,immediate'16,immediate'15,immediate'14,
              immediate'13,immediate'12,immediate'11,immediate'10,
              immediate'9,immediate'8,immediate'7,immediate'6,immediate'5,
              immediate'4,immediate'3,immediate'2,immediate'1,immediate'0],
             26)))
   | (false,
    (false,
     (false,
      (false,
       (true,
        (true,
         (immediate'25,
          (immediate'24,
           (immediate'23,
            (immediate'22,
             (immediate'21,
              (immediate'20,
               (immediate'19,
                (immediate'18,
                 (immediate'17,
                  (immediate'16,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Branch
       (JAL(BitsN.fromBitstring
              ([immediate'25,immediate'24,immediate'23,immediate'22,
                immediate'21,immediate'20,immediate'19,immediate'18,
                immediate'17,immediate'16,immediate'15,immediate'14,
                immediate'13,immediate'12,immediate'11,immediate'10,
                immediate'9,immediate'8,immediate'7,immediate'6,
                immediate'5,immediate'4,immediate'3,immediate'2,
                immediate'1,immediate'0],26)))
   | (false,
    (true,
     (false,
      (false,
       (false,
        (false,
         (true,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(false,(false,(false,(false,true))))))))))))))))))))))))))))))) =>
     TLBR
   | (false,
    (true,
     (false,
      (false,
       (false,
        (false,
         (true,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(false,(false,(false,(true,false))))))))))))))))))))))))))))))) =>
     TLBWI
   | (false,
    (true,
     (false,
      (false,
       (false,
        (false,
         (true,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(false,(false,(true,(true,false))))))))))))))))))))))))))))))) =>
     TLBWR
   | (false,
    (true,
     (false,
      (false,
       (false,
        (false,
         (true,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(false,(true,(false,(false,false))))))))))))))))))))))))))))))) =>
     TLBP
   | (false,
    (true,
     (false,
      (false,
       (false,
        (false,
         (true,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(true,(true,(false,(false,false))))))))))))))))))))))))))))))) =>
     ERET
   | (false,
    (true,
     (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (false,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(false,(false,(sel'2,(sel'1,sel'0))))))))))))))))))))))))))))))) =>
     CP(MFC0
          (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
           (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
            BitsN.fromBitstring([sel'2,sel'1,sel'0],3))))
   | (false,
    (true,
     (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (false,
            (false,
             (true,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(false,(false,(sel'2,(sel'1,sel'0))))))))))))))))))))))))))))))) =>
     CP(DMFC0
          (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
           (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
            BitsN.fromBitstring([sel'2,sel'1,sel'0],3))))
   | (false,
    (true,
     (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (true,
            (false,
             (false,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(false,(false,(sel'2,(sel'1,sel'0))))))))))))))))))))))))))))))) =>
     CP(MTC0
          (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
           (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
            BitsN.fromBitstring([sel'2,sel'1,sel'0],3))))
   | (false,
    (true,
     (false,
      (false,
       (false,
        (false,
         (false,
          (false,
           (true,
            (false,
             (true,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(false,(false,(sel'2,(sel'1,sel'0))))))))))))))))))))))))))))))) =>
     CP(DMTC0
          (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
           (BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5),
            BitsN.fromBitstring([sel'2,sel'1,sel'0],3))))
   | (false,
    (false,
     (false,
      (true,
       (true,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Branch
       (BLEZ
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring
             ([immediate'15,immediate'14,immediate'13,immediate'12,
               immediate'11,immediate'10,immediate'9,immediate'8,
               immediate'7,immediate'6,immediate'5,immediate'4,
               immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
    (false,
     (false,
      (true,
       (true,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Branch
       (BGTZ
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring
             ([immediate'15,immediate'14,immediate'13,immediate'12,
               immediate'11,immediate'10,immediate'9,immediate'8,
               immediate'7,immediate'6,immediate'5,immediate'4,
               immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
    (false,
     (true,
      (true,
       (true,
        (true,
         (false,
          (false,
           (false,
            (false,
             (false,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     ArithI
       (LUI(BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
    (true,
     (false,
      (true,
       (true,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Branch
       (BLEZL
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring
             ([immediate'15,immediate'14,immediate'13,immediate'12,
               immediate'11,immediate'10,immediate'9,immediate'8,
               immediate'7,immediate'6,immediate'5,immediate'4,
               immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
    (true,
     (false,
      (true,
       (true,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Branch
       (BGTZL
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring
             ([immediate'15,immediate'14,immediate'13,immediate'12,
               immediate'11,immediate'10,immediate'9,immediate'8,
               immediate'7,immediate'6,immediate'5,immediate'4,
               immediate'3,immediate'2,immediate'1,immediate'0],16)))
   | (false,
    (true,
     (true,
      (true,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(false,(false,(false,(false,false))))))))))))))))))))))))))))))) =>
     MultDiv
       (MADD
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
    (true,
     (true,
      (true,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(false,(false,(false,(false,true))))))))))))))))))))))))))))))) =>
     MultDiv
       (MADDU
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
    (true,
     (true,
      (true,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(false,(false,(true,(false,false))))))))))))))))))))))))))))))) =>
     MultDiv
       (MSUB
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
    (true,
     (true,
      (true,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(false,(false,(true,(false,true))))))))))))))))))))))))))))))) =>
     MultDiv
       (MSUBU
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5)))
   | (false,
    (true,
     (true,
      (true,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (false,(false,(false,(false,(true,false))))))))))))))))))))))))))))))) =>
     MultDiv
       (MUL(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))))
   | (false,
    (false,
     (false,
      (true,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Branch
       (BEQ(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
    (false,
     (false,
      (true,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Branch
       (BNE(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
    (false,
     (true,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     ArithI
       (ADDI
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
    (false,
     (true,
      (false,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     ArithI
       (ADDIU
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
    (false,
     (true,
      (false,
       (true,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     ArithI
       (SLTI
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
    (false,
     (true,
      (false,
       (true,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     ArithI
       (SLTIU
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
    (false,
     (true,
      (true,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     ArithI
       (ANDI
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
    (false,
     (true,
      (true,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     ArithI
       (ORI(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
    (false,
     (true,
      (true,
       (true,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     ArithI
       (XORI
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
    (true,
     (false,
      (true,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Branch
       (BEQL
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
    (true,
     (false,
      (true,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Branch
       (BNEL
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
    (true,
     (true,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     ArithI
       (DADDI
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
    (true,
     (true,
      (false,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     ArithI
       (DADDIU
          (BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
    (true,
     (true,
      (false,
       (true,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Load
       (LDL(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (false,
    (true,
     (true,
      (false,
       (true,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Load
       (LDR(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (false,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Load
       (LB(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (false,
     (false,
      (false,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Load
       (LH(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (false,
     (false,
      (false,
       (true,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Load
       (LWL(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (false,
     (false,
      (false,
       (true,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Load
       (LW(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (false,
     (false,
      (true,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Load
       (LBU(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (false,
     (false,
      (true,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Load
       (LHU(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (false,
     (false,
      (true,
       (true,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Load
       (LWR(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (false,
     (false,
      (true,
       (true,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Load
       (LWU(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (false,
     (true,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Store
       (SB(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (false,
     (true,
      (false,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Store
       (SH(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (false,
     (true,
      (false,
       (true,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Store
       (SWL(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (false,
     (true,
      (false,
       (true,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Store
       (SW(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (false,
     (true,
      (true,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Store
       (SDL(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (false,
     (true,
      (true,
       (false,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Store
       (SDR(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (false,
     (true,
      (true,
       (true,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Store
       (SWR(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (true,
     (false,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Load
       (LL(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (true,
     (false,
      (true,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Load
       (LLD(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (true,
     (false,
      (true,
       (true,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Load
       (LD(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (true,
     (true,
      (false,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Store
       (SC(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (true,
     (true,
      (true,
       (false,
        (false,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Store
       (SCD(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
            (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
             BitsN.fromBitstring
               ([immediate'15,immediate'14,immediate'13,immediate'12,
                 immediate'11,immediate'10,immediate'9,immediate'8,
                 immediate'7,immediate'6,immediate'5,immediate'4,
                 immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (true,
     (true,
      (true,
       (true,
        (true,
         (rs'4,
          (rs'3,
           (rs'2,
            (rs'1,
             (rs'0,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     Store
       (SD(BitsN.fromBitstring([rs'4,rs'3,rs'2,rs'1,rs'0],5),
           (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
            BitsN.fromBitstring
              ([immediate'15,immediate'14,immediate'13,immediate'12,
                immediate'11,immediate'10,immediate'9,immediate'8,
                immediate'7,immediate'6,immediate'5,immediate'4,
                immediate'3,immediate'2,immediate'1,immediate'0],16))))
   | (true,
    (false,
     (true,
      (true,
       (true,
        (true,
         (base'4,
          (base'3,
           (base'2,
            (base'1,
             (base'0,
              (opn'4,
               (opn'3,
                (opn'2,
                 (opn'1,
                  (opn'0,
                   (immediate'15,
                    (immediate'14,
                     (immediate'13,
                      (immediate'12,
                       (immediate'11,
                        (immediate'10,
                         (immediate'9,
                          (immediate'8,
                           (immediate'7,
                            (immediate'6,
                             (immediate'5,
                              (immediate'4,
                               (immediate'3,
                                (immediate'2,(immediate'1,immediate'0))))))))))))))))))))))))))))))) =>
     CACHE
       (BitsN.fromBitstring([base'4,base'3,base'2,base'1,base'0],5),
        (BitsN.fromBitstring([opn'4,opn'3,opn'2,opn'1,opn'0],5),
         BitsN.fromBitstring
           ([immediate'15,immediate'14,immediate'13,immediate'12,
             immediate'11,immediate'10,immediate'9,immediate'8,
             immediate'7,immediate'6,immediate'5,immediate'4,immediate'3,
             immediate'2,immediate'1,immediate'0],16)))
   | (false,
    (true,
     (true,
      (true,
       (true,
        (true,
         (false,
          (false,
           (false,
            (false,
             (false,
              (rt'4,
               (rt'3,
                (rt'2,
                 (rt'1,
                  (rt'0,
                   (rd'4,
                    (rd'3,
                     (rd'2,
                      (rd'1,
                       (rd'0,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (true,(true,(true,(false,(true,true))))))))))))))))))))))))))))))) =>
     RDHWR
       (BitsN.fromBitstring([rt'4,rt'3,rt'2,rt'1,rt'0],5),
        BitsN.fromBitstring([rd'4,rd'3,rd'2,rd'1,rd'0],5))
   | (false,
    (true,
     (false,
      (false,
       (false,
        (false,
         (true,
          (false,
           (false,
            (false,
             (false,
              (false,
               (false,
                (false,
                 (false,
                  (false,
                   (false,
                    (false,
                     (false,
                      (false,
                       (false,
                        (false,
                         (false,
                          (false,
                           (false,
                            (false,
                             (true,(false,(false,(false,(false,false))))))))))))))))))))))))))))))) =>
     WAIT
   | _ => ReservedInstruction;

fun Next () =
  ( case Fetch () of Option.SOME w => Run(Decode w) | NONE => ()
  ; case ((!BranchDelay),(!BranchTo)) of
       (NONE,NONE) => PC := (BitsN.+((!PC),BitsN.B(0x4,64)))
     | (NONE,Option.SOME(true,addr)) =>
       ( BranchDelay := (Option.SOME NONE); BranchTo := NONE; PC := addr )
     | (NONE,Option.SOME(false,addr)) =>
       ( BranchDelay := (Option.SOME(Option.SOME addr))
       ; BranchTo := NONE
       ; PC := (BitsN.+((!PC),BitsN.B(0x4,64)))
       )
     | (Option.SOME NONE,NONE) =>
       ( BranchDelay := NONE; PC := (BitsN.+((!PC),BitsN.B(0x4,64))) )
     | (Option.SOME(Option.SOME addr),NONE) =>
       ( BranchDelay := NONE; PC := addr )
     | _ => raise UNPREDICTABLE ("Branch follows branch")
  ; exceptionSignalled := false
  ; CP0 :=
    (CP0_Count_rupd((!CP0),BitsN.+(#Count((!CP0) : CP0),BitsN.B(0x1,32))))
  );

fun form1 (rs,(rt,(rd,(imm5,function)))) =
  BitsN.concat[BitsN.B(0x0,6),rs,rt,rd,imm5,function];

fun form2 (rs,(function,imm)) =
  BitsN.concat[BitsN.B(0x1,6),rs,function,imm];

fun form3 (function,(rt,(rd,sel))) =
  BitsN.concat[BitsN.B(0x10,6),function,rt,rd,BitsN.B(0x0,8),sel];

fun form4 (function,(rs,(rt,imm))) = BitsN.concat[function,rs,rt,imm];

fun form5 (rs,(rt,(rd,function))) =
  BitsN.concat[BitsN.B(0x1C,6),rs,rt,rd,BitsN.B(0x0,5),function];

fun form6 (rt,(rd,function)) =
  BitsN.concat
    [BitsN.B(0x1F,6),BitsN.B(0x0,5),rt,rd,BitsN.B(0x0,5),function];

fun Encode i =
  case i of
     Shift(SLL(rt,(rd,imm5))) =>
       form1(BitsN.B(0x0,5),(rt,(rd,(imm5,BitsN.B(0x0,6)))))
   | Shift(SRL(rt,(rd,imm5))) =>
     form1(BitsN.B(0x0,5),(rt,(rd,(imm5,BitsN.B(0x2,6)))))
   | Shift(SRA(rt,(rd,imm5))) =>
     form1(BitsN.B(0x0,5),(rt,(rd,(imm5,BitsN.B(0x3,6)))))
   | Shift(SLLV(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x4,6)))))
   | Shift(SRLV(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x6,6)))))
   | Shift(SRAV(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x7,6)))))
   | Branch(JR rs) =>
     form1
       (rs,
        (BitsN.B(0x0,5),(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x8,6)))))
   | Branch(JALR(rs,rd)) =>
     form1(rs,(BitsN.B(0x0,5),(rd,(BitsN.B(0x0,5),BitsN.B(0x9,6)))))
   | MultDiv(MFHI rd) =>
     form1
       (BitsN.B(0x0,5),
        (BitsN.B(0x0,5),(rd,(BitsN.B(0x0,5),BitsN.B(0x10,6)))))
   | MultDiv(MTHI rs) =>
     form1
       (rs,
        (BitsN.B(0x0,5),(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x11,6)))))
   | MultDiv(MFLO rd) =>
     form1
       (BitsN.B(0x0,5),
        (BitsN.B(0x0,5),(rd,(BitsN.B(0x0,5),BitsN.B(0x12,6)))))
   | MultDiv(MTLO rs) =>
     form1
       (rs,
        (BitsN.B(0x0,5),(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x13,6)))))
   | Shift(DSLLV(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x14,6)))))
   | Shift(DSRLV(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x16,6)))))
   | Shift(DSRAV(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x17,6)))))
   | MultDiv(MADD(rs,rt)) =>
     form5(rs,(rt,(BitsN.B(0x0,5),BitsN.B(0x0,6))))
   | MultDiv(MADDU(rs,rt)) =>
     form5(rs,(rt,(BitsN.B(0x0,5),BitsN.B(0x1,6))))
   | MultDiv(MSUB(rs,rt)) =>
     form5(rs,(rt,(BitsN.B(0x0,5),BitsN.B(0x4,6))))
   | MultDiv(MSUBU(rs,rt)) =>
     form5(rs,(rt,(BitsN.B(0x0,5),BitsN.B(0x5,6))))
   | MultDiv(MUL(rs,(rt,rd))) => form5(rs,(rt,(rd,BitsN.B(0x2,6))))
   | MultDiv(MULT(rs,rt)) =>
     form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x18,6)))))
   | MultDiv(MULTU(rs,rt)) =>
     form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x19,6)))))
   | MultDiv(DIV(rs,rt)) =>
     form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x1A,6)))))
   | MultDiv(DIVU(rs,rt)) =>
     form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x1B,6)))))
   | MultDiv(DMULT(rs,rt)) =>
     form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x1C,6)))))
   | MultDiv(DMULTU(rs,rt)) =>
     form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x1D,6)))))
   | MultDiv(DDIV(rs,rt)) =>
     form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x1E,6)))))
   | MultDiv(DDIVU(rs,rt)) =>
     form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x1F,6)))))
   | ArithR(MOVZ(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0xA,6)))))
   | ArithR(MOVN(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0xB,6)))))
   | ArithR(ADD(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x20,6)))))
   | ArithR(ADDU(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x21,6)))))
   | ArithR(SUB(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x22,6)))))
   | ArithR(SUBU(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x23,6)))))
   | ArithR(AND(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x24,6)))))
   | ArithR(OR(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x25,6)))))
   | ArithR(XOR(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x26,6)))))
   | ArithR(NOR(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x27,6)))))
   | ArithR(SLT(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x2A,6)))))
   | ArithR(SLTU(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x2B,6)))))
   | ArithR(DADD(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x2C,6)))))
   | ArithR(DADDU(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x2D,6)))))
   | ArithR(DSUB(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x2E,6)))))
   | ArithR(DSUBU(rs,(rt,rd))) =>
     form1(rs,(rt,(rd,(BitsN.B(0x0,5),BitsN.B(0x2F,6)))))
   | Trap(TGE(rs,rt)) =>
     form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x30,6)))))
   | Trap(TGEU(rs,rt)) =>
     form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x31,6)))))
   | Trap(TLT(rs,rt)) =>
     form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x32,6)))))
   | Trap(TLTU(rs,rt)) =>
     form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x33,6)))))
   | Trap(TEQ(rs,rt)) =>
     form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x34,6)))))
   | Trap(TNE(rs,rt)) =>
     form1(rs,(rt,(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x36,6)))))
   | Shift(DSLL(rt,(rd,imm5))) =>
     form1(BitsN.B(0x0,5),(rt,(rd,(imm5,BitsN.B(0x38,6)))))
   | Shift(DSRL(rt,(rd,imm5))) =>
     form1(BitsN.B(0x0,5),(rt,(rd,(imm5,BitsN.B(0x3A,6)))))
   | Shift(DSRA(rt,(rd,imm5))) =>
     form1(BitsN.B(0x0,5),(rt,(rd,(imm5,BitsN.B(0x3B,6)))))
   | Shift(DSLL32(rt,(rd,imm5))) =>
     form1(BitsN.B(0x0,5),(rt,(rd,(imm5,BitsN.B(0x3C,6)))))
   | Shift(DSRL32(rt,(rd,imm5))) =>
     form1(BitsN.B(0x0,5),(rt,(rd,(imm5,BitsN.B(0x3E,6)))))
   | Shift(DSRA32(rt,(rd,imm5))) =>
     form1(BitsN.B(0x0,5),(rt,(rd,(imm5,BitsN.B(0x3F,6)))))
   | Branch(BLTZ(rs,imm)) => form2(rs,(BitsN.B(0x0,5),imm))
   | Branch(BGEZ(rs,imm)) => form2(rs,(BitsN.B(0x1,5),imm))
   | Branch(BLTZL(rs,imm)) => form2(rs,(BitsN.B(0x2,5),imm))
   | Branch(BGEZL(rs,imm)) => form2(rs,(BitsN.B(0x3,5),imm))
   | Trap(TGEI(rs,imm)) => form2(rs,(BitsN.B(0x8,5),imm))
   | Trap(TGEIU(rs,imm)) => form2(rs,(BitsN.B(0x9,5),imm))
   | Trap(TLTI(rs,imm)) => form2(rs,(BitsN.B(0xA,5),imm))
   | Trap(TLTIU(rs,imm)) => form2(rs,(BitsN.B(0xB,5),imm))
   | Trap(TEQI(rs,imm)) => form2(rs,(BitsN.B(0xC,5),imm))
   | Trap(TNEI(rs,imm)) => form2(rs,(BitsN.B(0xE,5),imm))
   | Branch(BLTZAL(rs,imm)) => form2(rs,(BitsN.B(0x10,5),imm))
   | Branch(BGEZAL(rs,imm)) => form2(rs,(BitsN.B(0x11,5),imm))
   | Branch(BLTZALL(rs,imm)) => form2(rs,(BitsN.B(0x12,5),imm))
   | Branch(BGEZALL(rs,imm)) => form2(rs,(BitsN.B(0x13,5),imm))
   | Branch(J imm) => BitsN.@@(BitsN.B(0x2,6),imm)
   | Branch(JAL imm) => BitsN.@@(BitsN.B(0x3,6),imm)
   | CP(MFC0(rt,(rd,sel))) => form3(BitsN.B(0x0,5),(rt,(rd,sel)))
   | CP(DMFC0(rt,(rd,sel))) => form3(BitsN.B(0x1,5),(rt,(rd,sel)))
   | CP(MTC0(rt,(rd,sel))) => form3(BitsN.B(0x4,5),(rt,(rd,sel)))
   | CP(DMTC0(rt,(rd,sel))) => form3(BitsN.B(0x5,5),(rt,(rd,sel)))
   | Branch(BEQ(rs,(rt,imm))) => form4(BitsN.B(0x4,6),(rs,(rt,imm)))
   | Branch(BNE(rs,(rt,imm))) => form4(BitsN.B(0x5,6),(rs,(rt,imm)))
   | Branch(BLEZ(rs,imm)) =>
     form4(BitsN.B(0x6,6),(rs,(BitsN.B(0x0,5),imm)))
   | Branch(BGTZ(rs,imm)) =>
     form4(BitsN.B(0x7,6),(rs,(BitsN.B(0x0,5),imm)))
   | ArithI(ADDI(rs,(rt,imm))) => form4(BitsN.B(0x8,6),(rs,(rt,imm)))
   | ArithI(ADDIU(rs,(rt,imm))) => form4(BitsN.B(0x9,6),(rs,(rt,imm)))
   | ArithI(SLTI(rs,(rt,imm))) => form4(BitsN.B(0xA,6),(rs,(rt,imm)))
   | ArithI(SLTIU(rs,(rt,imm))) => form4(BitsN.B(0xB,6),(rs,(rt,imm)))
   | ArithI(ANDI(rs,(rt,imm))) => form4(BitsN.B(0xC,6),(rs,(rt,imm)))
   | ArithI(ORI(rs,(rt,imm))) => form4(BitsN.B(0xD,6),(rs,(rt,imm)))
   | ArithI(XORI(rs,(rt,imm))) => form4(BitsN.B(0xE,6),(rs,(rt,imm)))
   | ArithI(LUI(rt,imm)) =>
     form4(BitsN.B(0xF,6),(BitsN.B(0x0,5),(rt,imm)))
   | Branch(BEQL(rs,(rt,imm))) => form4(BitsN.B(0x14,6),(rs,(rt,imm)))
   | Branch(BNEL(rs,(rt,imm))) => form4(BitsN.B(0x15,6),(rs,(rt,imm)))
   | Branch(BLEZL(rs,imm)) =>
     form4(BitsN.B(0x16,6),(rs,(BitsN.B(0x0,5),imm)))
   | Branch(BGTZL(rs,imm)) =>
     form4(BitsN.B(0x17,6),(rs,(BitsN.B(0x0,5),imm)))
   | ArithI(DADDI(rs,(rt,imm))) => form4(BitsN.B(0x18,6),(rs,(rt,imm)))
   | ArithI(DADDIU(rs,(rt,imm))) => form4(BitsN.B(0x19,6),(rs,(rt,imm)))
   | Load(LDL(rs,(rt,imm))) => form4(BitsN.B(0x1A,6),(rs,(rt,imm)))
   | Load(LDR(rs,(rt,imm))) => form4(BitsN.B(0x1B,6),(rs,(rt,imm)))
   | Load(LB(rs,(rt,imm))) => form4(BitsN.B(0x20,6),(rs,(rt,imm)))
   | Load(LH(rs,(rt,imm))) => form4(BitsN.B(0x21,6),(rs,(rt,imm)))
   | Load(LWL(rs,(rt,imm))) => form4(BitsN.B(0x22,6),(rs,(rt,imm)))
   | Load(LW(rs,(rt,imm))) => form4(BitsN.B(0x23,6),(rs,(rt,imm)))
   | Load(LBU(rs,(rt,imm))) => form4(BitsN.B(0x24,6),(rs,(rt,imm)))
   | Load(LHU(rs,(rt,imm))) => form4(BitsN.B(0x25,6),(rs,(rt,imm)))
   | Load(LWR(rs,(rt,imm))) => form4(BitsN.B(0x26,6),(rs,(rt,imm)))
   | Load(LWU(rs,(rt,imm))) => form4(BitsN.B(0x27,6),(rs,(rt,imm)))
   | Store(SB(rs,(rt,imm))) => form4(BitsN.B(0x28,6),(rs,(rt,imm)))
   | Store(SH(rs,(rt,imm))) => form4(BitsN.B(0x29,6),(rs,(rt,imm)))
   | Store(SWL(rs,(rt,imm))) => form4(BitsN.B(0x2A,6),(rs,(rt,imm)))
   | Store(SW(rs,(rt,imm))) => form4(BitsN.B(0x2B,6),(rs,(rt,imm)))
   | Store(SDL(rs,(rt,imm))) => form4(BitsN.B(0x2C,6),(rs,(rt,imm)))
   | Store(SDR(rs,(rt,imm))) => form4(BitsN.B(0x2D,6),(rs,(rt,imm)))
   | Store(SWR(rs,(rt,imm))) => form4(BitsN.B(0x2E,6),(rs,(rt,imm)))
   | Load(LL(rs,(rt,imm))) => form4(BitsN.B(0x30,6),(rs,(rt,imm)))
   | Load(LLD(rs,(rt,imm))) => form4(BitsN.B(0x34,6),(rs,(rt,imm)))
   | Load(LD(rs,(rt,imm))) => form4(BitsN.B(0x37,6),(rs,(rt,imm)))
   | Store(SC(rs,(rt,imm))) => form4(BitsN.B(0x38,6),(rs,(rt,imm)))
   | Store(SCD(rs,(rt,imm))) => form4(BitsN.B(0x3C,6),(rs,(rt,imm)))
   | Store(SD(rs,(rt,imm))) => form4(BitsN.B(0x3F,6),(rs,(rt,imm)))
   | CACHE(rs,(opn,imm)) => form4(BitsN.B(0x2F,6),(rs,(opn,imm)))
   | SYSCALL => BitsN.fromNat(BitsN.toNat(BitsN.B(0xC,6)),32)
   | BREAK => BitsN.fromNat(BitsN.toNat(BitsN.B(0xD,6)),32)
   | SYNC imm5 =>
     BitsN.fromNat(BitsN.toNat(BitsN.@@(imm5,BitsN.B(0xF,6))),32)
   | TLBR => BitsN.B(0x42000001,32)
   | TLBWI => BitsN.B(0x42000002,32)
   | TLBWR => BitsN.B(0x42000006,32)
   | TLBP => BitsN.B(0x42000008,32)
   | ERET => BitsN.B(0x42000018,32)
   | RDHWR(rt,rd) => form6(rt,(rd,BitsN.B(0x3B,6)))
   | WAIT => BitsN.B(0x42000020,32)
   | Unpredictable => BitsN.B(0x7F00000,32)
   | ReservedInstruction => BitsN.B(0x0,32);

fun cpr r =
  ("c0_")
    ^
    (case r of
        BitsN.B(0x0,_) => "index"
      | BitsN.B(0x1,_) => "random"
      | BitsN.B(0x2,_) => "entrylo0"
      | BitsN.B(0x3,_) => "entrylo1"
      | BitsN.B(0x4,_) => "context"
      | BitsN.B(0x5,_) => "pagemask"
      | BitsN.B(0x6,_) => "wired"
      | BitsN.B(0x7,_) => "hwrena"
      | BitsN.B(0x8,_) => "badvaddr"
      | BitsN.B(0x9,_) => "count"
      | BitsN.B(0xA,_) => "entryhi"
      | BitsN.B(0xB,_) => "compare"
      | BitsN.B(0xC,_) => "status"
      | BitsN.B(0xD,_) => "cause"
      | BitsN.B(0xE,_) => "epc"
      | BitsN.B(0xF,_) => "prid"
      | BitsN.B(0x10,_) => "config"
      | BitsN.B(0x11,_) => "lladdr"
      | BitsN.B(0x12,_) => "watchlo"
      | BitsN.B(0x13,_) => "watchhi"
      | BitsN.B(0x14,_) => "xcontext"
      | BitsN.B(0x15,_) => "21"
      | BitsN.B(0x16,_) => "22"
      | BitsN.B(0x17,_) => "debug"
      | BitsN.B(0x18,_) => "depc"
      | BitsN.B(0x19,_) => "perfcnt"
      | BitsN.B(0x1A,_) => "errctl"
      | BitsN.B(0x1B,_) => "cacheerr"
      | BitsN.B(0x1C,_) => "taglo"
      | BitsN.B(0x1D,_) => "taghi"
      | BitsN.B(0x1E,_) => "errorepc"
      | BitsN.B(0x1F,_) => "kscratch"
      | _ => raise General.Bind);

fun r n = ("$") ^ (Nat.toString(BitsN.toNat n));

fun c n = (", ") ^ (r n);

fun i N n =
  String.concat
    [", ",if BitsN.<+(n,BitsN.BV(0xA,N)) then "" else "0x",
     BitsN.toHexString n];

fun oi N n = if n = (BitsN.BV(0x0,N)) then "" else i N n;

fun op1i N (s,n) =
  String.concat[L3.padRightString(#" ",(8,s)),"0x",BitsN.toHexString n];

fun op1r (s,n) = (L3.padRightString(#" ",(8,s))) ^ (r n);

fun op1ri N (s,(r1,n)) = (op1r(s,r1)) ^ (i N n);

fun op2r (s,(r1,r2)) = (op1r(s,r1)) ^ (c r2);

fun op2ri N (s,(r1,(r2,n))) = (op2r(s,(r1,r2))) ^ (i N n);

fun op3r (s,(r1,(r2,r3))) = (op2r(s,(r1,r2))) ^ (c r3);

fun op2roi N (s,(r1,(r2,n))) =
  String.concat[op1r(s,r1),", ",cpr r2,oi N n];

fun opmem N (s,(r1,(r2,n))) =
  String.concat[op1ri N (s,(r1,n)),"(",r r2,")"];

fun instructionToString i =
  case i of
     Shift(SLL(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x0,5)))) => "nop"
   | Shift(SLL(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x1,5)))) => "ssnop"
   | Shift(SLL(rt,(rd,imm5))) => op2ri 5 ("sll",(rd,(rt,imm5)))
   | Shift(SRL(rt,(rd,imm5))) => op2ri 5 ("srl",(rd,(rt,imm5)))
   | Shift(SRA(rt,(rd,imm5))) => op2ri 5 ("sra",(rd,(rt,imm5)))
   | Shift(SLLV(rs,(rt,rd))) => op3r("sllv",(rd,(rt,rs)))
   | Shift(SRLV(rs,(rt,rd))) => op3r("srlv",(rd,(rt,rs)))
   | Shift(SRAV(rs,(rt,rd))) => op3r("srav",(rd,(rt,rs)))
   | Branch(JR rs) => op1r("jr",rs)
   | Branch(JALR(rs,rd)) => op2r("jalr",(rd,rs))
   | MultDiv(MFHI rd) => op1r("mfhi",rd)
   | MultDiv(MTHI rd) => op1r("mthi",rd)
   | MultDiv(MFLO rs) => op1r("mflo",rs)
   | MultDiv(MTLO rs) => op1r("mtlo",rs)
   | Shift(DSLLV(rs,(rt,rd))) => op3r("dsllv",(rd,(rt,rs)))
   | Shift(DSRLV(rs,(rt,rd))) => op3r("dsrlv",(rd,(rt,rs)))
   | Shift(DSRAV(rs,(rt,rd))) => op3r("dsrav",(rd,(rt,rs)))
   | MultDiv(MADD(rs,rt)) => op2r("madd",(rs,rt))
   | MultDiv(MADDU(rs,rt)) => op2r("maddu",(rs,rt))
   | MultDiv(MSUB(rs,rt)) => op2r("msub",(rs,rt))
   | MultDiv(MSUBU(rs,rt)) => op2r("msubu",(rs,rt))
   | MultDiv(MUL(rs,(rt,rd))) => op3r("mul",(rd,(rs,rt)))
   | MultDiv(MULT(rs,rt)) => op2r("mult",(rs,rt))
   | MultDiv(MULTU(rs,rt)) => op2r("multu",(rs,rt))
   | MultDiv(DIV(rs,rt)) => op2r("div",(rs,rt))
   | MultDiv(DIVU(rs,rt)) => op2r("divu",(rs,rt))
   | MultDiv(DMULT(rs,rt)) => op2r("dmult",(rs,rt))
   | MultDiv(DMULTU(rs,rt)) => op2r("dmultu",(rs,rt))
   | MultDiv(DDIV(rs,rt)) => op2r("ddiv",(rs,rt))
   | MultDiv(DDIVU(rs,rt)) => op2r("ddivu",(rs,rt))
   | ArithR(MOVN(rs,(rt,rd))) => op3r("movn",(rd,(rs,rt)))
   | ArithR(MOVZ(rs,(rt,rd))) => op3r("movz",(rd,(rs,rt)))
   | ArithR(ADD(rs,(rt,rd))) => op3r("add",(rd,(rs,rt)))
   | ArithR(ADDU(rs,(rt,rd))) => op3r("addu",(rd,(rs,rt)))
   | ArithR(SUB(rs,(rt,rd))) => op3r("sub",(rd,(rs,rt)))
   | ArithR(SUBU(rs,(rt,rd))) => op3r("subu",(rd,(rs,rt)))
   | ArithR(AND(rs,(rt,rd))) => op3r("and",(rd,(rs,rt)))
   | ArithR(OR(rs,(rt,rd))) => op3r("or",(rd,(rs,rt)))
   | ArithR(XOR(rs,(rt,rd))) => op3r("xor",(rd,(rs,rt)))
   | ArithR(NOR(rs,(rt,rd))) => op3r("nor",(rd,(rs,rt)))
   | ArithR(SLT(rs,(rt,rd))) => op3r("slt",(rd,(rs,rt)))
   | ArithR(SLTU(rs,(rt,rd))) => op3r("sltu",(rd,(rs,rt)))
   | ArithR(DADD(rs,(rt,rd))) => op3r("dadd",(rd,(rs,rt)))
   | ArithR(DADDU(rs,(rt,rd))) => op3r("daddu",(rd,(rs,rt)))
   | ArithR(DSUB(rs,(rt,rd))) => op3r("dsub",(rd,(rs,rt)))
   | ArithR(DSUBU(rs,(rt,rd))) => op3r("dsubu",(rd,(rs,rt)))
   | Trap(TGE(rs,rt)) => op2r("tge",(rs,rt))
   | Trap(TGEU(rs,rt)) => op2r("tgeu",(rs,rt))
   | Trap(TLT(rs,rt)) => op2r("tlt",(rs,rt))
   | Trap(TLTU(rs,rt)) => op2r("tltu",(rs,rt))
   | Trap(TEQ(rs,rt)) => op2r("teq",(rs,rt))
   | Trap(TNE(rs,rt)) => op2r("tne",(rs,rt))
   | Shift(DSLL(rt,(rd,imm5))) => op2ri 5 ("dsll",(rd,(rt,imm5)))
   | Shift(DSRL(rt,(rd,imm5))) => op2ri 5 ("dsrl",(rd,(rt,imm5)))
   | Shift(DSRA(rt,(rd,imm5))) => op2ri 5 ("dsra",(rd,(rt,imm5)))
   | Shift(DSLL32(rt,(rd,imm5))) => op2ri 5 ("dsll32",(rd,(rt,imm5)))
   | Shift(DSRL32(rt,(rd,imm5))) => op2ri 5 ("dsrl32",(rd,(rt,imm5)))
   | Shift(DSRA32(rt,(rd,imm5))) => op2ri 5 ("dsra32",(rd,(rt,imm5)))
   | Branch(BLTZ(rs,imm)) => op1ri 16 ("bltz",(rs,imm))
   | Branch(BGEZ(rs,imm)) => op1ri 16 ("bgez",(rs,imm))
   | Branch(BLTZL(rs,imm)) => op1ri 16 ("bltzl",(rs,imm))
   | Branch(BGEZL(rs,imm)) => op1ri 16 ("bgezl",(rs,imm))
   | Trap(TGEI(rs,imm)) => op1ri 16 ("tgei",(rs,imm))
   | Trap(TGEIU(rs,imm)) => op1ri 16 ("tgeiu",(rs,imm))
   | Trap(TLTI(rs,imm)) => op1ri 16 ("tlti",(rs,imm))
   | Trap(TLTIU(rs,imm)) => op1ri 16 ("tltiu",(rs,imm))
   | Trap(TEQI(rs,imm)) => op1ri 16 ("teqi",(rs,imm))
   | Trap(TNEI(rs,imm)) => op1ri 16 ("tnei",(rs,imm))
   | Branch(BLTZAL(rs,imm)) => op1ri 16 ("bltzal",(rs,imm))
   | Branch(BGEZAL(rs,imm)) => op1ri 16 ("bgezal",(rs,imm))
   | Branch(BLTZALL(rs,imm)) => op1ri 16 ("bltzall",(rs,imm))
   | Branch(BGEZALL(rs,imm)) => op1ri 16 ("bgezall",(rs,imm))
   | Branch(J imm) => op1i 26 ("j",imm)
   | Branch(JAL imm) => op1i 26 ("jal",imm)
   | CP(MFC0(rt,(rd,sel))) => op2roi 3 ("mfc0",(rt,(rd,sel)))
   | CP(DMFC0(rt,(rd,sel))) => op2roi 3 ("dmfc0",(rt,(rd,sel)))
   | CP(MTC0(rt,(rd,sel))) => op2roi 3 ("mtc0",(rt,(rd,sel)))
   | CP(DMTC0(rt,(rd,sel))) => op2roi 3 ("dmtc0",(rt,(rd,sel)))
   | Branch(BEQ(BitsN.B(0x0,5),(BitsN.B(0x0,5),imm))) => op1i 16 ("b",imm)
   | Branch(BEQ(rs,(rt,imm))) => op2ri 16 ("beq",(rs,(rt,imm)))
   | Branch(BNE(rs,(rt,imm))) => op2ri 16 ("bne",(rs,(rt,imm)))
   | Branch(BLEZ(rs,imm)) => op1ri 16 ("blez",(rs,imm))
   | Branch(BGTZ(rs,imm)) => op1ri 16 ("bgtz",(rs,imm))
   | ArithI(ADDI(rs,(rt,imm))) => op2ri 16 ("addi",(rt,(rs,imm)))
   | ArithI(ADDIU(rs,(rt,imm))) => op2ri 16 ("addiu",(rt,(rs,imm)))
   | ArithI(SLTI(rs,(rt,imm))) => op2ri 16 ("slti",(rt,(rs,imm)))
   | ArithI(SLTIU(rs,(rt,imm))) => op2ri 16 ("sltiu",(rt,(rs,imm)))
   | ArithI(ANDI(rs,(rt,imm))) => op2ri 16 ("andi",(rt,(rs,imm)))
   | ArithI(ORI(rs,(rt,imm))) => op2ri 16 ("ori",(rt,(rs,imm)))
   | ArithI(XORI(rs,(rt,imm))) => op2ri 16 ("xori",(rt,(rs,imm)))
   | ArithI(LUI(rt,imm)) => op1ri 16 ("lui",(rt,imm))
   | Branch(BEQL(rs,(rt,imm))) => op2ri 16 ("beql",(rs,(rt,imm)))
   | Branch(BNEL(rs,(rt,imm))) => op2ri 16 ("bnel",(rs,(rt,imm)))
   | Branch(BLEZL(rs,imm)) => op1ri 16 ("blezl",(rs,imm))
   | Branch(BGTZL(rs,imm)) => op1ri 16 ("bgtzl",(rs,imm))
   | ArithI(DADDI(rs,(rt,imm))) => op2ri 16 ("daddi",(rt,(rs,imm)))
   | ArithI(DADDIU(rs,(rt,imm))) => op2ri 16 ("daddiu",(rt,(rs,imm)))
   | Load(LDL(rs,(rt,imm))) => opmem 16 ("ldl",(rt,(rs,imm)))
   | Load(LDR(rs,(rt,imm))) => opmem 16 ("ldr",(rt,(rs,imm)))
   | Load(LB(rs,(rt,imm))) => opmem 16 ("lb",(rt,(rs,imm)))
   | Load(LH(rs,(rt,imm))) => opmem 16 ("lh",(rt,(rs,imm)))
   | Load(LWL(rs,(rt,imm))) => opmem 16 ("lwl",(rt,(rs,imm)))
   | Load(LW(rs,(rt,imm))) => opmem 16 ("lw",(rt,(rs,imm)))
   | Load(LBU(rs,(rt,imm))) => opmem 16 ("lbu",(rt,(rs,imm)))
   | Load(LHU(rs,(rt,imm))) => opmem 16 ("lhu",(rt,(rs,imm)))
   | Load(LWR(rs,(rt,imm))) => opmem 16 ("lwr",(rt,(rs,imm)))
   | Load(LWU(rs,(rt,imm))) => opmem 16 ("lwu",(rt,(rs,imm)))
   | Store(SB(rs,(rt,imm))) => opmem 16 ("sb",(rt,(rs,imm)))
   | Store(SH(rs,(rt,imm))) => opmem 16 ("sh",(rt,(rs,imm)))
   | Store(SWL(rs,(rt,imm))) => opmem 16 ("swl",(rt,(rs,imm)))
   | Store(SW(rs,(rt,imm))) => opmem 16 ("sw",(rt,(rs,imm)))
   | Store(SDL(rs,(rt,imm))) => opmem 16 ("sdl",(rt,(rs,imm)))
   | Store(SDR(rs,(rt,imm))) => opmem 16 ("sdr",(rt,(rs,imm)))
   | Store(SWR(rs,(rt,imm))) => opmem 16 ("swr",(rt,(rs,imm)))
   | Load(LL(rs,(rt,imm))) => opmem 16 ("ll",(rt,(rs,imm)))
   | Load(LLD(rs,(rt,imm))) => opmem 16 ("lld",(rt,(rs,imm)))
   | Load(LD(rs,(rt,imm))) => opmem 16 ("ld",(rt,(rs,imm)))
   | Store(SC(rs,(rt,imm))) => opmem 16 ("sc",(rt,(rs,imm)))
   | Store(SCD(rs,(rt,imm))) => opmem 16 ("scd",(rt,(rs,imm)))
   | Store(SD(rs,(rt,imm))) => opmem 16 ("sd",(rt,(rs,imm)))
   | CACHE(rs,(opn,imm)) => opmem 16 ("cache",(opn,(rs,imm)))
   | SYSCALL => "syscall"
   | BREAK => "break"
   | SYNC imm5 => ("sync ") ^ (BitsN.toHexString imm5)
   | TLBR => "tlbr"
   | TLBWI => "tlbwi"
   | TLBWR => "tlbwr"
   | TLBP => "tlbp"
   | ERET => "eret"
   | RDHWR(rt,rd) => op2r("rdhwr",(rt,rd))
   | WAIT => "wait"
   | Unpredictable => "???"
   | ReservedInstruction => "???";

fun skipSpaces s = L3.snd(L3.splitl(fn c => Char.isSpace c,s));

fun stripSpaces s =
  L3.fst(L3.splitr(fn c => Char.isSpace c,skipSpaces s));

fun p_number s =
  case String.explode(stripSpaces s) of
     #"0" :: (#"b" :: t) => Nat.fromBinString(String.implode t)
   | #"0" :: (#"x" :: t) => Nat.fromHexString(String.implode t)
   | _ => Nat.fromString s;

fun p_tokens s =
  let
    val (l,r) =
      L3.splitl
        (fn c => not(Char.isSpace c),
         L3.lowercase(L3.snd(L3.splitl(fn c => Char.isSpace c,s))))
    val r = L3.uncurry String.fields (fn c => c = #",",r)
    val r =
      if ((L3.length r) = 1) andalso ((stripSpaces(List.hd r)) = (""))
        then []
      else r
  in
    l :: r
  end;

fun p_reg s =
  case String.explode(stripSpaces s) of
     #"$" :: r =>
       (case Nat.fromString(String.implode r) of
           Option.SOME n => Option.SOME(BitsN.fromNat(n,5))
         | NONE => NONE)
   | _ => NONE;

fun p_reg2 l =
  case l of
     [r1,r2] =>
       (case (p_reg r1,p_reg r2) of
           (Option.SOME a,Option.SOME b) => Option.SOME(a,b)
         | _ => NONE)
   | _ => NONE;

fun p_address s =
  let
    val (l,r) = L3.splitl(fn c => not(c = #"("),stripSpaces s)
  in
    case (p_number l,String.explode r) of
       (Option.SOME n,#"(" :: r) =>
         let
           val i = BitsN.fromNat(n,16)
           val (r,e) = L3.splitr(fn c => c = #")",String.implode r)
         in
           if (n = (BitsN.toNat i)) andalso (e = (")"))
             then case p_reg r of
                     Option.SOME x => Option.SOME(i,x)
                   | NONE => NONE
           else NONE
         end
     | _ => NONE
  end;

fun p_arg0 s =
  case s of
     "nop" =>
       OK(Shift(SLL(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x0,5)))))
   | "ssnop" =>
     OK(Shift(SLL(BitsN.B(0x0,5),(BitsN.B(0x0,5),BitsN.B(0x1,5)))))
   | "syscall" => OK SYSCALL
   | "break" => OK BREAK
   | "tlbr" => OK TLBR
   | "tlbwi" => OK TLBWI
   | "tlbwr" => OK TLBWR
   | "tlbp" => OK TLBP
   | "eret" => OK ERET
   | "wait" => OK WAIT
   | _ => FAIL("Unrecognised mnemonic");

fun p_r1 (s,r) =
  case s of
     "jr" => OK(Branch(JR r))
   | "mfhi" => OK(MultDiv(MFHI r))
   | "mthi" => OK(MultDiv(MTHI r))
   | "mflo" => OK(MultDiv(MFLO r))
   | "mtlo" => OK(MultDiv(MTLO r))
   | _ => FAIL("Unrecognised mnemonic");

fun p_r2 (s,(rs,rt)) =
  case s of
     "jalr" => OK(Branch(JALR(rt,rs)))
   | "madd" => OK(MultDiv(MADD(rs,rt)))
   | "maddu" => OK(MultDiv(MADDU(rs,rt)))
   | "msub" => OK(MultDiv(MSUB(rs,rt)))
   | "msubu" => OK(MultDiv(MSUBU(rs,rt)))
   | "mult" => OK(MultDiv(MULT(rs,rt)))
   | "multu" => OK(MultDiv(MULTU(rs,rt)))
   | "div" => OK(MultDiv(DIV(rs,rt)))
   | "divu" => OK(MultDiv(DIVU(rs,rt)))
   | "dmult" => OK(MultDiv(DMULT(rs,rt)))
   | "dmultu" => OK(MultDiv(DMULTU(rs,rt)))
   | "ddiv" => OK(MultDiv(DDIV(rs,rt)))
   | "ddivu" => OK(MultDiv(DDIVU(rs,rt)))
   | "tge" => OK(Trap(TGE(rs,rt)))
   | "tgeu" => OK(Trap(TGEU(rs,rt)))
   | "tlt" => OK(Trap(TLT(rs,rt)))
   | "tltu" => OK(Trap(TLTU(rs,rt)))
   | "teq" => OK(Trap(TEQ(rs,rt)))
   | "tne" => OK(Trap(TNE(rs,rt)))
   | "rdhwr" => OK(RDHWR(rs,rt))
   | _ => FAIL("Unrecognised mnemonic");

fun p_r3 (s,(rd,(rs,rt))) =
  case s of
     "sllv" => OK(Shift(SLLV(rt,(rs,rd))))
   | "srlv" => OK(Shift(SRLV(rt,(rs,rd))))
   | "srav" => OK(Shift(SRAV(rt,(rs,rd))))
   | "dsllv" => OK(Shift(DSLLV(rt,(rs,rd))))
   | "dsrlv" => OK(Shift(DSRLV(rt,(rs,rd))))
   | "dsrav" => OK(Shift(DSRAV(rt,(rs,rd))))
   | "mul" => OK(MultDiv(MUL(rs,(rt,rd))))
   | "movn" => OK(ArithR(MOVN(rs,(rt,rd))))
   | "movz" => OK(ArithR(MOVZ(rs,(rt,rd))))
   | "add" => OK(ArithR(ADD(rs,(rt,rd))))
   | "addu" => OK(ArithR(ADDU(rs,(rt,rd))))
   | "sub" => OK(ArithR(SUB(rs,(rt,rd))))
   | "subu" => OK(ArithR(SUBU(rs,(rt,rd))))
   | "and" => OK(ArithR(AND(rs,(rt,rd))))
   | "or" => OK(ArithR(OR(rs,(rt,rd))))
   | "xor" => OK(ArithR(XOR(rs,(rt,rd))))
   | "nor" => OK(ArithR(NOR(rs,(rt,rd))))
   | "slt" => OK(ArithR(SLT(rs,(rt,rd))))
   | "sltu" => OK(ArithR(SLTU(rs,(rt,rd))))
   | "dadd" => OK(ArithR(DADD(rs,(rt,rd))))
   | "daddu" => OK(ArithR(DADDU(rs,(rt,rd))))
   | "dsub" => OK(ArithR(DSUB(rs,(rt,rd))))
   | "dsubu" => OK(ArithR(DSUBU(rs,(rt,rd))))
   | _ => FAIL("Unrecognised mnemonic");

fun imm_ok N (n,(imm,i)) =
  if n = (BitsN.toNat imm) then OK i else FAIL("immediate too large");

fun p_1i (s,n) =
  case s of
     "j" =>
       let
         val i = BitsN.fromNat(n,26)
       in
         imm_ok 26 (n,(i,Branch(J i)))
       end
   | "jal" =>
     let
       val i = BitsN.fromNat(n,26)
     in
       imm_ok 26 (n,(i,Branch(JAL i)))
     end
   | "beq" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Branch(BEQ(BitsN.B(0x0,5),(BitsN.B(0x0,5),i)))))
     end
   | "word" =>
     let
       val i = BitsN.fromNat(n,32)
     in
       if n = (BitsN.toNat i)
         then WORD32 i
       else FAIL("immediate too large")
     end
   | _ => FAIL("Unrecognised mnemonic");

fun p_r1i (s,(r,n)) =
  case s of
     "bltz" =>
       let
         val i = BitsN.fromNat(n,16)
       in
         imm_ok 16 (n,(i,Branch(BLTZ(r,i))))
       end
   | "bgez" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Branch(BGEZ(r,i))))
     end
   | "blez" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Branch(BLEZ(r,i))))
     end
   | "bgtz" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Branch(BGTZ(r,i))))
     end
   | "bltzl" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Branch(BLTZL(r,i))))
     end
   | "bgezl" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Branch(BGEZL(r,i))))
     end
   | "blezl" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Branch(BLEZL(r,i))))
     end
   | "bgtzl" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Branch(BGTZL(r,i))))
     end
   | "tgei" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Trap(TGEI(r,i))))
     end
   | "tgeiu" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Trap(TGEIU(r,i))))
     end
   | "tlti" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Trap(TLTI(r,i))))
     end
   | "tltiu" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Trap(TLTIU(r,i))))
     end
   | "teqi" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Trap(TEQI(r,i))))
     end
   | "tnei" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Trap(TNEI(r,i))))
     end
   | "bltzal" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Branch(BLTZAL(r,i))))
     end
   | "bgezal" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Branch(BGEZAL(r,i))))
     end
   | "bltzall" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Branch(BLTZALL(r,i))))
     end
   | "bgezall" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Branch(BGEZALL(r,i))))
     end
   | "lui" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,ArithI(LUI(r,i))))
     end
   | _ => FAIL("Unrecognised mnemonic");

fun p_r2i (s,(r1,(r2,n))) =
  case s of
     "sll" =>
       let
         val i = BitsN.fromNat(n,5)
       in
         imm_ok 5 (n,(i,Shift(SLL(r2,(r1,i)))))
       end
   | "srl" =>
     let
       val i = BitsN.fromNat(n,5)
     in
       imm_ok 5 (n,(i,Shift(SRL(r2,(r1,i)))))
     end
   | "sra" =>
     let
       val i = BitsN.fromNat(n,5)
     in
       imm_ok 5 (n,(i,Shift(SRA(r2,(r1,i)))))
     end
   | "dsll" =>
     let
       val i = BitsN.fromNat(n,5)
     in
       imm_ok 5 (n,(i,Shift(DSLL(r2,(r1,i)))))
     end
   | "dsrl" =>
     let
       val i = BitsN.fromNat(n,5)
     in
       imm_ok 5 (n,(i,Shift(DSRL(r2,(r1,i)))))
     end
   | "dsra" =>
     let
       val i = BitsN.fromNat(n,5)
     in
       imm_ok 5 (n,(i,Shift(DSRA(r2,(r1,i)))))
     end
   | "dsll32" =>
     let
       val i = BitsN.fromNat(n,5)
     in
       imm_ok 5 (n,(i,Shift(DSLL32(r2,(r1,i)))))
     end
   | "dsrl32" =>
     let
       val i = BitsN.fromNat(n,5)
     in
       imm_ok 5 (n,(i,Shift(DSRL32(r2,(r1,i)))))
     end
   | "dsra32" =>
     let
       val i = BitsN.fromNat(n,5)
     in
       imm_ok 5 (n,(i,Shift(DSRA32(r2,(r1,i)))))
     end
   | "beq" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Branch(BEQ(r1,(r2,i)))))
     end
   | "bne" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Branch(BNE(r1,(r2,i)))))
     end
   | "beql" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Branch(BEQL(r1,(r2,i)))))
     end
   | "bnel" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,Branch(BNEL(r1,(r2,i)))))
     end
   | "addi" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,ArithI(ADDI(r2,(r1,i)))))
     end
   | "addiu" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,ArithI(ADDIU(r2,(r1,i)))))
     end
   | "daddi" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,ArithI(DADDI(r2,(r1,i)))))
     end
   | "daddiu" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,ArithI(DADDIU(r2,(r1,i)))))
     end
   | "slti" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,ArithI(SLTI(r2,(r1,i)))))
     end
   | "sltiu" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,ArithI(SLTIU(r2,(r1,i)))))
     end
   | "andi" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,ArithI(ANDI(r2,(r1,i)))))
     end
   | "ori" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,ArithI(ORI(r2,(r1,i)))))
     end
   | "xori" =>
     let
       val i = BitsN.fromNat(n,16)
     in
       imm_ok 16 (n,(i,ArithI(XORI(r2,(r1,i)))))
     end
   | _ => FAIL("Unrecognised mnemonic");

fun p_opmem (s,(rt,(rs,imm))) =
  case s of
     "ldl" => OK(Load(LDL(rs,(rt,imm))))
   | "ldr" => OK(Load(LDR(rs,(rt,imm))))
   | "lb" => OK(Load(LB(rs,(rt,imm))))
   | "lh" => OK(Load(LH(rs,(rt,imm))))
   | "lwl" => OK(Load(LWL(rs,(rt,imm))))
   | "lw" => OK(Load(LW(rs,(rt,imm))))
   | "lbu" => OK(Load(LBU(rs,(rt,imm))))
   | "lhu" => OK(Load(LHU(rs,(rt,imm))))
   | "lwr" => OK(Load(LWR(rs,(rt,imm))))
   | "lwu" => OK(Load(LWU(rs,(rt,imm))))
   | "sb" => OK(Store(SB(rs,(rt,imm))))
   | "sh" => OK(Store(SH(rs,(rt,imm))))
   | "swl" => OK(Store(SWL(rs,(rt,imm))))
   | "sw" => OK(Store(SW(rs,(rt,imm))))
   | "sdl" => OK(Store(SDL(rs,(rt,imm))))
   | "sdr" => OK(Store(SDR(rs,(rt,imm))))
   | "swr" => OK(Store(SWR(rs,(rt,imm))))
   | "ll" => OK(Load(LL(rs,(rt,imm))))
   | "lld" => OK(Load(LLD(rs,(rt,imm))))
   | "ld" => OK(Load(LD(rs,(rt,imm))))
   | "sc" => OK(Store(SC(rs,(rt,imm))))
   | "scd" => OK(Store(SCD(rs,(rt,imm))))
   | "sd" => OK(Store(SD(rs,(rt,imm))))
   | _ => FAIL("Unrecognised mnemonic");

fun instructionFromString s =
  case p_tokens s of
     [x] => p_arg0 x
   | [x,a] =>
     (case p_reg a of
         Option.SOME r => p_r1(x,r)
       | NONE =>
         (case p_number a of
             Option.SOME n => p_1i(x,n)
           | _ => FAIL("Syntax error")))
   | [x,a,b] =>
     (case (p_reg a,p_reg b) of
         (Option.SOME r1,Option.SOME r2) => p_r2(x,(r1,r2))
       | (Option.SOME r1,NONE) =>
         (case p_number b of
             Option.SOME n => p_r1i(x,(r1,n))
           | _ =>
             (case p_address b of
                 Option.SOME(i,r2) => p_opmem(x,(r1,(r2,i)))
               | NONE => FAIL("Syntax error")))
       | _ => FAIL("Syntax error"))
   | [x,a,b,c] =>
     (case (p_reg2[a,b],p_reg c) of
         (Option.SOME(r1,r2),Option.SOME r3) => p_r3(x,(r1,(r2,r3)))
       | (Option.SOME(r1,r2),NONE) =>
         (case p_number c of
             Option.SOME n => p_r2i(x,(r1,(r2,n)))
           | _ => FAIL("Syntax error"))
       | _ => FAIL("Syntax error"))
   | _ => FAIL("Syntax error");

fun encodeInstruction s =
  case instructionFromString s of
     OK i => L3.padLeftString(#"0",(8,BitsN.toHexString(Encode i)))
   | WORD32 w => L3.padLeftString(#"0",(8,BitsN.toHexString w))
   | FAIL s => s;

end